package lexer;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;

parser code {:

    public  ArrayList<String> errores = new ArrayList<String>();

    @Override
    protected int error_sync_size () { return 1; }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { 
            reportar_error("Error de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    public String toStringErrores() {        
        String value = "";
        for (String error : errores)            
            value += error + "\n";
        return value;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("Se ha detectado un erro en la linea: " + s.left 
            + " columna " + s.right);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
        //System.exit(1);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }
:}


terminal
 
    DATA_TYPE,
    
    RW_BEGIN, RW_CONST, RW_DO, RW_ELSE, RW_END, RW_FALSE, RW_FOR, RW_FUNCTION, RW_IF, RW_OF, RW_PROCEDURE, RW_PROGRAM, RW_READ,RW_THEN, RW_TO, RW_TRUE, RW_UNTIL, RW_VAR, RW_WHILE, RW_WHITE, RW_WRITE,
    
    OP_PLUSPLUS, OP_LESSLESS, OP_TWOPOINTSEGUAL, OP_PLUS, OP_LESS,OP_MULTIPLY, OP_DIVIDE, OP_MOD, OP_LEFTPARENTHESIS, OP_RIGHTPARENTHESIS,
    OP_PLUSEQUAL, OP_LESSEQUAL, OP_MULTEQUAL, OP_DIVEQUAL, OP_DIV,OP_COMMA, OP_SEMI, OP_TWOPOINTS,
    OPB_EQUAL, OPB_GREATEREQUAL, OPB_GREATER, OPB_LESSEQUAL,OPB_LESS, OPB_DIFERENT, OPB_OR, OPB_AND, OPB_NOT,IDENTIFIER;

terminal Integer ENTERO;
terminal Double  REAL;
terminal Double  SCIENTIFIC_NOTATION;
terminal String  STRING_LINE;
terminal String  STRING_BLOCK;
terminal String  NUMERAL_CHARACTER;


non terminal 
    declaration_program, optional_sections, optional_sections2,
    constants_section, declarations_constants, declaration_constant,
    variables_section, declarations_variables, declaration_var,
    functions_section, function, procedure, parameters, parameters_list, value,
    seccion_instrucciones, seccion_instrucciones1,
    bloque_while,condicion_booleana, condicion_booleana1, condicion_booleana2, condicion_not, operador_booleano, operador_aritmetico,
    cuerpo_estructura_control, cuerpo_estructura_control1, sentencia;


start with declaration_program;

declaration_program ::=   RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones RW_END
                        | error:e IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones RW_END
                            {:
                                parser.report_error("ERROR: Sin PROGRAM",e);
                            :}
                        | RW_PROGRAM error:e optional_sections RW_BEGIN seccion_instrucciones RW_END
                            {:
                                parser.report_error("ERROR: Programa sin IDENTIFICADOR", e);
                            :}
                        /*| RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones error:e
                            {:
                                parser.report_error("ERROR: Programa sin END", e);
                            :}*/
                        | error:e
                            {:
                                parser.report_error("Error en declaración bloques programa",e);
                            :};

optional_sections ::=     constants_section variables_section functions_section
                        | constants_section
                        | variables_section
                        | functions_section
                        | constants_section variables_section
                        | constants_section functions_section
                        | variables_section functions_section
                        | /* epsilon*/;

optional_sections2 ::=    constants_section variables_section
                        | constants_section
                        | variables_section
                        | /* epsilon */;
// CONSTANTES
constants_section ::= RW_CONST declarations_constants;

declarations_constants ::=    declaration_constant
                            | declaration_constant declarations_constants;                        

declaration_constant ::=  IDENTIFIER:id OPB_EQUAL value OP_SEMI
                        /*| IDENTIFIER:id error:e OP_SEMI
                            {:
                                parser.report_error("ERROR #1:\n" + 
                                                    "\tIDENTIFIER error OP_SEMI\n" +
                                                    "\tDeclaración de constante incorrecta " + id + " ", e);
                            :}
                        | IDENTIFIER:id OPB_EQUAL error:e OP_SEMI
                            {:
                                parser.report_error("ERROR #2:\n" +
                                                    "\tIDENTIFIER OPB_EQUAL error OP_SEMI\n" +
                                                    "\tDeclaración de constante incorrecta " + id + " ", e);
                            :}
                        | IDENTIFIER:id error:e value OP_SEMI
                            {:
                                parser.report_error("ERROR #3:\n" +
                                                    "\tIDENTIFIER OPB_EQUAL error OP_SEMI\n" +
                                                    "\tDeclaración de constante incorrecta " + id + " ", e);
                            :}
                        | error:e OPB_EQUAL OP_SEMI
                            {:
                                parser.report_error("ERROR #4:\n" +
                                                    "\terror:e OPB_EQUAL OP_SEMI\n" +
                                                    "\tDeclaración de constante incorrecta ", e);
                            :}*/
                        | error:e OP_SEMI
                            {:
                                parser.report_error("ERROR: Declaración de constante incorrecta ", e);
                            :};

// VARIABLES
variables_section ::= RW_VAR declarations_variables;

declarations_variables ::=    declaration_var
                            | declaration_var declarations_variables;

declaration_var ::=   IDENTIFIER:e OP_TWOPOINTS DATA_TYPE OP_SEMI
                    | IDENTIFIER OP_COMMA declaration_var
                    /*| IDENTIFIER error:e OP_SEMI
                        {:
                            parser.report_error("ERROR #1: Declaración de variable incorrecta", e);
                        :}
                    | IDENTIFIER OP_TWOPOINTS error:e OP_SEMI
                        {:
                            parser.report_error("ERROR #2 : Declaración de variable incorrecta", e);
                        :}*/
                    | error:e OP_SEMI
                        {:
                            parser.report_error("ERROR: Declaración de variable incorrecta", e);
                        :};

// FUNCIONES
functions_section ::=   function
                      | procedure
                      | function functions_section
                      | procedure functions_section;

function ::=  RW_FUNCTION IDENTIFIER:id OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
              RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER:id_return OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    if(!id.equals(id_return)){
                        parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                    }
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error:e
                RW_BEGIN optional_sections2 seccion_instrucciones
                IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.report_error("ERROR: Función sin valor de retorno", e);
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
                RW_BEGIN error:e
                IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.report_error("ERROR: Funcióm con cuerpo incorrecto", e);
                :}
            | RW_FUNCTION IDENTIFIER error:e
                RW_BEGIN optional_sections2 seccion_instrucciones 
                IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.report_error("ERROR: Función parametros proc cuerpo incorrecto", e);
                :}
            | RW_FUNCTION error:e RW_END
                {:
                    parser.report_error("ERROR: Función estructura incorrecta", e);
                :};
            /*| RW_FUNCTION error:e OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
              RW_BEGIN IDENTIFIER:id_return OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Función sin nombre identificador" + e);
                    parser.report_error("ERROR: Función sin nombre identificador", e);
                :}
            | RW_FUNCTION IDENTIFIER error:e OP_TWOPOINTS DATA_TYPE
              RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Parentesis incorrectos para los parametros" + e);
                    parser.report_error("ERROR: Parentesis incorrectos para los parametros", e);
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error:e
              RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Un función debe tener valor de retorno" + e);
                    parser.report_error("ERROR: Un función debe tener valor de retorno", e);
                :}
            /*| RW_FUNCTION OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
              RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Función sin nombre identificador" + "FUNCT");
                    parser.report_error("ERROR: Función sin nombre identificador", "FUNCT");
                :}
            | RW_FUNCTION IDENTIFIER parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
                RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                :}
            | RW_FUNCTION IDENTIFIER parameters //OP_TWOPOINTS DATA_TYPE
              RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Función sin parentesis para los parametros" + "PROC");
                    parser.report_error("ERROR: Función sin parentesis para los parametros", "PROC");
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_TWOPOINTS DATA_TYPE
                RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                    parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS
              RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                {:
                    parser.errores.add("ERROR: Un función debe tener valor de retorno" + "FUNCT");
                    parser.report_error("ERROR: Un función debe tener valor de retorno", "FUNCT");
                :}*/
            /*| RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
                RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error:e RW_END
                {:
                    parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                    parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                :}
            | RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE
                RW_BEGIN error:e RW_END
                {:
                    parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                    parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                :}
            | RW_FUNCTION error:e RW_END
                {:
                    parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                    parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                :}*/
  

procedure ::=     RW_PROCEDURE IDENTIFIER:id OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS
                  RW_BEGIN optional_sections2 seccion_instrucciones 
                  IDENTIFIER:id_return OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        if(!id.equals(id_return)){                            
                            parser.report_error("ERROR: Identificador de procedimiento y retorno distintos", id);
                        }
                    :}
                /*| RW_PROCEDURE error:e OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS
                  RW_BEGIN optional_sections2 seccion_instrucciones
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento sin nombre identificador", e);
                    :}
                | RW_PROCEDURE IDENTIFIER error:e
                  RW_BEGIN optional_sections2 seccion_instrucciones
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento con parentesis", e);
                    :}*/
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error:e
                  RW_BEGIN optional_sections2 seccion_instrucciones 
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento con valor de retorno", e);
                    :}
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS
                  RW_BEGIN error:e
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento cuerpo incorrecto", e);
                    :}
                | RW_PROCEDURE IDENTIFIER error:e
                  RW_BEGIN optional_sections2 seccion_instrucciones 
                  IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento parametros proc cuerpo incorrecto", e);
                    :}
                | RW_PROCEDURE error:e RW_END
                    {:
                        parser.report_error("ERROR: Procedimiento estructura incorrecta", e);
                    :};
                /*| RW_PROCEDURE error:e RW_BEGIN 
                  optional_sections2 IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                    :};*/
                /*| RW_PROCEDURE OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS 
                  RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.errores.add("ERROR: Procedimiento sin nombre identificador" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin nombre identificador", "PROC");
                    :}
                | RW_PROCEDURE IDENTIFIER parameters OP_RIGHTPARENTHESIS
                  RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.errores.add("ERROR: Procedimiento sin parentesis izquierdo para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis izquierdo para los parametros", "PROC");
                    :}
                | RW_PROCEDURE IDENTIFIER parameters
                  RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.errores.add("ERROR: Procedimiento sin parentesis para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis para los parametros", "PROC");
                    :}
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters
                  RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.errores.add("ERROR: Procedimiento sin parentesis derecho para los parametros" + "PROC");
                        parser.report_error("ERROR: Procedimiento sin parentesis derecho para los parametros", "PROC");
                    :}
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS 
                  error:e RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END
                    {:
                        parser.errores.add("ERROR: Un procedimiento no debe tener valor de retorno" + e);
                        parser.report_error("ERROR: Un procedimiento no debe tener valor de retorno", e);
                    :}
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS 
                  RW_BEGIN IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI error:e RW_END
                    {:
                        parser.errores.add("ERROR: Linea inalcansable porque la linea de retorno esta antes" + e);
                        parser.report_error("ERROR: Linea inalcansable porque la linea de retorno esta antes", e);
                    :}
                | RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS 
                  RW_BEGIN error:e RW_END
                    {:
                        parser.errores.add("ERROR: Linea de retorno con estructura incorrecta" + e);
                        parser.report_error("ERROR: Linea de retorno con estructura incorrecta", e);
                    :}
                | RW_PROCEDURE error:e RW_END
                  {:
                        parser.errores.add("ERROR: Estructura de procedimiento incorrecta" + e);
                        parser.report_error("ERROR: Estructura de procedimiento incorrecta", e);
                  :};*/

parameters ::=    DATA_TYPE IDENTIFIER
                | DATA_TYPE IDENTIFIER parameters_list
                | /* epsilon */
                | error:e
                    {:
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    :}; 

/*parameters ::=    DATA_TYPE IDENTIFIER
                | DATA_TYPE IDENTIFIER OP_COMMA parameters
                | /* epsilon *//*
                | error:e 
                    {:
                        parser.errores.add("ERROR: Estructura del parametros mal definida");
                        parser.report_error("ERROR: Estructura del parametros mal definida",e);
                    :};*/

parameters_list ::=   OP_COMMA DATA_TYPE IDENTIFIER
                    | OP_COMMA DATA_TYPE IDENTIFIER parameters_list
                    | error:e
                        {:
                            parser.report_error("ERROR: Estructura del parametros mal definida", e);
                        :};




value ::= /*add idenfiticador*/ ENTERO | REAL | SCIENTIFIC_NOTATION | STRING_LINE | STRING_BLOCK;


//INSTRUCCIONES
seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones | seccion_instrucciones1; 


seccion_instrucciones1 ::= bloque_while /* | AGREGAR bloque_if | bloque_for */
    /*| error:e 
        {: 
            parser.errores.add("Error en el cuerpo de instrucciones");
            parser.report_error("Error en el cuerpo de instrucciones",e);
        :}*/
    ;

//ESTRUCTURAS DE CONTROL
bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO
        RW_BEGIN cuerpo_estructura_control RW_END
        | RW_WHILE error:e cuerpo_estructura_control RW_END
            {: 
                parser.errores.add("Falta expresión en while");
                parser.report_error("Falta expresión en while", e);
            :}
        | RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error:e cuerpo_estructura_control RW_END
            {: 
                parser.errores.add("ERROR: Falta do para el while" + e);
                parser.report_error("ERROR: Falta do para el while", e);
            :}
        | RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO error:e cuerpo_estructura_control RW_END
            {: 
                parser.errores.add("ERROR: Falta begin para el while" + e);
                parser.report_error("ERROR: Falta begin para el while", e);
            :}
        ;


//UTILITARIAS
condicion_booleana ::= condicion_booleana1 | condicion_not 
    | OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS
    | RW_TRUE | RW_FALSE
    | error:e 
        {: 
            parser.errores.add("Error en condición booleana");
            parser.report_error("Error en condición booleana",e);
        :}
    ;

condicion_not ::= OPB_NOT IDENTIFIER | OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS;

condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2;

condicion_booleana2 ::= IDENTIFIER | ENTERO | REAL;

operador_booleano ::= OPB_EQUAL | OPB_GREATEREQUAL | OPB_GREATER | OPB_LESSEQUAL | OPB_LESS | OPB_DIFERENT | OPB_OR | OPB_AND | OPB_NOT;

operador_aritmetico ::= OP_PLUSPLUS | OP_LESSLESS | OP_TWOPOINTSEGUAL | OP_PLUS | OP_LESS | OP_MULTIPLY | OP_DIVIDE | OP_MOD
    | OP_LEFTPARENTHESIS | OP_RIGHTPARENTHESIS | OP_PLUSEQUAL | OP_LESSEQUAL | OP_MULTEQUAL | OP_DIVEQUAL | OP_DIV;

cuerpo_estructura_control ::= /*epsilon*/ |cuerpo_estructura_control1 cuerpo_estructura_control;

cuerpo_estructura_control1 ::=  bloque_while /* | bloque_if | bloque_for */ | sentencia;

sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI
        | IDENTIFIER OP_PLUSPLUS OP_SEMI
        | IDENTIFIER OP_LESSLESS OP_SEMI
        | IDENTIFIER OP_TWOPOINTSEGUAL value operador_aritmetico value OP_SEMI
        | IDENTIFIER error:e OP_SEMI
            {: 
                parser.errores.add("Error en sentencia");
                parser.report_error("Error en sentencia",e);
            :}
        ;
