
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 24 11:47:53 CST 2018
//----------------------------------------------------

package lexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 24 11:47:53 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\004\000\002\006\003" +
    "\000\002\006\004\000\002\007\006\000\002\007\004\000" +
    "\002\010\004\000\002\011\003\000\002\011\004\000\002" +
    "\012\006\000\002\012\005\000\002\012\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\014\021\000\002\014\020\000\002\014\020\000" +
    "\002\014\015\000\002\014\005\000\002\015\017\000\002" +
    "\015\020\000\002\015\016\000\002\015\015\000\002\015" +
    "\005\000\002\016\004\000\002\016\005\000\002\016\002" +
    "\000\002\016\003\000\002\017\005\000\002\017\006\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\004\000\002\021\003\000\002\022\003\000\002\023\012" +
    "\000\002\023\006\000\002\023\011\000\002\023\012\000" +
    "\002\024\003\000\002\024\003\000\002\024\011\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\027" +
    "\004\000\002\027\006\000\002\025\005\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\002\000\002\032\004\000\002\033\003\000" +
    "\002\033\003\000\002\034\006\000\002\034\005\000\002" +
    "\034\005\000\002\034\010\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\006\003\005\020\004\001\002\000\006\003" +
    "\343\065\344\001\002\000\006\002\ufffd\065\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\014\005\ufff5\006\020\014\012\017\015\026\014\001\002" +
    "\000\010\005\uffe4\014\012\017\015\001\002\000\006\003" +
    "\272\065\273\001\002\000\004\005\ufff9\001\002\000\006" +
    "\003\260\065\261\001\002\000\006\003\175\065\176\001" +
    "\002\000\012\005\ufffb\014\012\017\015\026\014\001\002" +
    "\000\010\005\uffe5\014\012\017\015\001\002\000\006\003" +
    "\161\065\162\001\002\000\004\005\024\001\002\000\010" +
    "\005\ufffa\014\012\017\015\001\002\000\004\005\ufff6\001" +
    "\002\000\004\027\026\001\002\000\004\011\157\001\002" +
    "\000\006\003\032\042\033\001\002\000\010\011\uffc9\027" +
    "\uffc9\065\uffc9\001\002\000\010\011\uffca\027\026\065\uffca" +
    "\001\002\000\006\011\uffcb\065\uffcb\001\002\000\010\011" +
    "\uffa0\027\026\065\102\001\002\000\022\003\043\012\034" +
    "\024\037\042\036\064\041\065\044\066\040\067\042\001" +
    "\002\000\004\043\uffc0\001\002\000\004\043\075\001\002" +
    "\000\010\065\044\066\040\067\042\001\002\000\004\043" +
    "\uffc1\001\002\000\026\043\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001" +
    "\002\000\006\042\064\065\063\001\002\000\026\043\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\001\002\000\004\043\uffbf\001\002" +
    "\000\026\043\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000\004" +
    "\043\uffc3\001\002\000\024\054\051\055\052\056\050\057" +
    "\057\060\061\061\060\062\055\063\056\064\054\001\002" +
    "\000\004\043\uffc4\001\002\000\012\042\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\001\002\000\012\042\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\001\002\000\012\042\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\001\002\000\010\065\044\066\040\067\042\001\002" +
    "\000\012\042\uffb0\065\uffb0\066\uffb0\067\uffb0\001\002\000" +
    "\012\042\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000\012" +
    "\042\uffb1\065\uffb1\066\uffb1\067\uffb1\001\002\000\012\042" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\012\042\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\001\002\000\012\042\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\001\002\000\004\043\uffbc\001\002" +
    "\000\004\043\uffbe\001\002\000\010\065\044\066\040\067" +
    "\042\001\002\000\004\043\066\001\002\000\004\043\uffbd" +
    "\001\002\000\004\043\070\001\002\000\024\054\051\055" +
    "\052\056\050\057\057\060\061\061\060\062\055\063\056" +
    "\064\054\001\002\000\004\042\072\001\002\000\010\065" +
    "\044\066\040\067\042\001\002\000\004\043\074\001\002" +
    "\000\004\043\uffc2\001\002\000\006\003\076\007\077\001" +
    "\002\000\010\011\uffa0\027\026\065\102\001\002\000\006" +
    "\003\100\005\101\001\002\000\010\011\uffa0\027\026\065" +
    "\102\001\002\000\010\011\uffa0\027\026\065\102\001\002" +
    "\000\012\003\112\032\114\033\113\034\111\001\002\000" +
    "\010\011\uff9d\027\uff9d\065\uff9d\001\002\000\010\011\uff9e" +
    "\027\uff9e\065\uff9e\001\002\000\010\011\uffa0\027\026\065" +
    "\102\001\002\000\004\011\107\001\002\000\010\011\uffc8" +
    "\027\uffc8\065\uffc8\001\002\000\004\011\uff9f\001\002\000" +
    "\014\066\125\067\120\070\121\071\123\072\124\001\002" +
    "\000\004\052\117\001\002\000\004\052\116\001\002\000" +
    "\004\052\115\001\002\000\010\011\uff9b\027\uff9b\065\uff9b" +
    "\001\002\000\010\011\uff9a\027\uff9a\065\uff9a\001\002\000" +
    "\010\011\uff98\027\uff98\065\uff98\001\002\000\042\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\052\uffcf\001\002\000\042\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\052" +
    "\uffce\001\002\000\042\032\140\033\145\034\127\035\136" +
    "\036\143\037\142\040\141\041\144\042\131\043\126\044" +
    "\146\045\133\046\134\047\137\050\130\052\135\001\002" +
    "\000\042\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\052\uffcd\001\002\000\042\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\052\uffcc\001\002\000\042\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\052\uffd0\001\002\000\014\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\001\002\000\014\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\072\uffad\001\002\000\014\066\uffa1\067\uffa1\070" +
    "\uffa1\071\uffa1\072\uffa1\001\002\000\014\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\001\002\000\014\066\125\067" +
    "\120\070\121\071\123\072\124\001\002\000\014\066\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000\014\066" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000\010" +
    "\011\uff9c\027\uff9c\065\uff9c\001\002\000\014\066\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\001\002\000\014\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\001\002\000\014\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\001\002\000\014" +
    "\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002\000" +
    "\014\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002" +
    "\000\014\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\001" +
    "\002\000\014\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\001\002\000\014\066\uffae\067\uffae\070\uffae\071\uffae\072" +
    "\uffae\001\002\000\014\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\001\002\000\004\052\150\001\002\000\010\011" +
    "\uff99\027\uff99\065\uff99\001\002\000\004\011\152\001\002" +
    "\000\010\011\uffc5\027\uffc5\065\uffc5\001\002\000\004\011" +
    "\154\001\002\000\010\011\uffc6\027\uffc6\065\uffc6\001\002" +
    "\000\004\011\156\001\002\000\010\011\uffc7\027\uffc7\065" +
    "\uffc7\001\002\000\004\002\uffff\001\002\000\014\005\ufff0" +
    "\014\ufff0\017\ufff0\026\ufff0\027\ufff0\001\002\000\004\052" +
    "\170\001\002\000\004\054\165\001\002\000\020\003\161" +
    "\005\uffef\014\uffef\017\uffef\026\uffef\027\uffef\065\162\001" +
    "\002\000\014\005\uffee\014\uffee\017\uffee\026\uffee\027\uffee" +
    "\001\002\000\014\066\125\067\120\070\121\071\123\072" +
    "\124\001\002\000\004\052\167\001\002\000\020\003\uffed" +
    "\005\uffed\014\uffed\017\uffed\026\uffed\027\uffed\065\uffed\001" +
    "\002\000\020\003\uffec\005\uffec\014\uffec\017\uffec\026\uffec" +
    "\027\uffec\065\uffec\001\002\000\004\005\uffe3\001\002\000" +
    "\010\005\ufff8\014\012\017\015\001\002\000\004\005\ufff7" +
    "\001\002\000\004\005\ufffc\001\002\000\004\011\256\001" +
    "\002\000\006\003\177\042\200\001\002\000\004\005\246" +
    "\001\002\000\010\003\202\004\201\043\uffd5\001\002\000" +
    "\004\065\237\001\002\000\004\043\uffd4\001\002\000\004" +
    "\043\204\001\002\000\006\003\205\005\206\001\002\000" +
    "\004\005\227\001\002\000\012\003\211\006\020\026\014" +
    "\027\ufff1\001\002\000\004\027\ufff2\001\002\000\006\026" +
    "\014\027\ufff3\001\002\000\004\065\221\001\002\000\004" +
    "\027\026\001\002\000\004\065\214\001\002\000\004\034" +
    "\215\001\002\000\014\066\125\067\120\070\121\071\123" +
    "\072\124\001\002\000\004\052\217\001\002\000\004\011" +
    "\220\001\002\000\010\005\uffdc\014\uffdc\017\uffdc\001\002" +
    "\000\004\034\222\001\002\000\014\066\125\067\120\070" +
    "\121\071\123\072\124\001\002\000\004\052\224\001\002" +
    "\000\004\011\225\001\002\000\010\005\uffda\014\uffda\017" +
    "\uffda\001\002\000\004\027\ufff4\001\002\000\010\006\020" +
    "\026\014\027\ufff1\001\002\000\004\027\026\001\002\000" +
    "\004\065\232\001\002\000\004\034\233\001\002\000\014" +
    "\066\125\067\120\070\121\071\123\072\124\001\002\000" +
    "\004\052\235\001\002\000\004\011\236\001\002\000\010" +
    "\005\uffdb\014\uffdb\017\uffdb\001\002\000\010\003\240\043" +
    "\uffd7\051\241\001\002\000\004\043\uffd1\001\002\000\004" +
    "\004\243\001\002\000\004\043\uffd6\001\002\000\004\065" +
    "\244\001\002\000\010\003\240\043\uffd3\051\241\001\002" +
    "\000\004\043\uffd2\001\002\000\010\006\020\026\014\027" +
    "\ufff1\001\002\000\004\027\026\001\002\000\004\065\251" +
    "\001\002\000\004\034\252\001\002\000\014\066\125\067" +
    "\120\070\121\071\123\072\124\001\002\000\004\052\254" +
    "\001\002\000\004\011\255\001\002\000\010\005\uffd9\014" +
    "\uffd9\017\uffd9\001\002\000\010\005\uffd8\014\uffd8\017\uffd8" +
    "\001\002\000\016\003\260\005\uffea\014\uffea\017\uffea\027" +
    "\uffea\065\261\001\002\000\004\052\270\001\002\000\006" +
    "\051\264\053\263\001\002\000\012\005\uffeb\014\uffeb\017" +
    "\uffeb\027\uffeb\001\002\000\004\004\266\001\002\000\006" +
    "\003\260\065\261\001\002\000\016\003\uffe7\005\uffe7\014" +
    "\uffe7\017\uffe7\027\uffe7\065\uffe7\001\002\000\004\052\267" +
    "\001\002\000\016\003\uffe8\005\uffe8\014\uffe8\017\uffe8\027" +
    "\uffe8\065\uffe8\001\002\000\016\003\uffe6\005\uffe6\014\uffe6" +
    "\017\uffe6\027\uffe6\065\uffe6\001\002\000\012\005\uffe9\014" +
    "\uffe9\017\uffe9\027\uffe9\001\002\000\004\011\341\001\002" +
    "\000\006\003\274\042\275\001\002\000\004\005\331\001" +
    "\002\000\010\003\202\004\201\043\uffd5\001\002\000\004" +
    "\043\277\001\002\000\006\003\301\053\300\001\002\000" +
    "\004\004\312\001\002\000\004\005\302\001\002\000\010" +
    "\006\020\026\014\027\ufff1\001\002\000\004\027\026\001" +
    "\002\000\004\065\305\001\002\000\004\034\306\001\002" +
    "\000\014\066\125\067\120\070\121\071\123\072\124\001" +
    "\002\000\004\052\310\001\002\000\004\011\311\001\002" +
    "\000\010\005\uffe0\014\uffe0\017\uffe0\001\002\000\004\005" +
    "\313\001\002\000\012\003\314\006\020\026\014\027\ufff1" +
    "\001\002\000\004\065\324\001\002\000\004\027\026\001" +
    "\002\000\004\065\317\001\002\000\004\034\320\001\002" +
    "\000\014\066\125\067\120\070\121\071\123\072\124\001" +
    "\002\000\004\052\322\001\002\000\004\011\323\001\002" +
    "\000\010\005\uffe1\014\uffe1\017\uffe1\001\002\000\004\034" +
    "\325\001\002\000\014\066\125\067\120\070\121\071\123" +
    "\072\124\001\002\000\004\052\327\001\002\000\004\011" +
    "\330\001\002\000\010\005\uffdf\014\uffdf\017\uffdf\001\002" +
    "\000\010\006\020\026\014\027\ufff1\001\002\000\004\027" +
    "\026\001\002\000\004\065\334\001\002\000\004\034\335" +
    "\001\002\000\014\066\125\067\120\070\121\071\123\072" +
    "\124\001\002\000\004\052\337\001\002\000\004\011\340" +
    "\001\002\000\010\005\uffde\014\uffde\017\uffde\001\002\000" +
    "\010\005\uffdd\014\uffdd\017\uffdd\001\002\000\004\005\uffe2" +
    "\001\002\000\014\005\ufff5\006\020\014\012\017\015\026" +
    "\014\001\002\000\014\005\ufff5\006\020\014\012\017\015" +
    "\026\014\001\002\000\004\005\346\001\002\000\004\027" +
    "\026\001\002\000\004\011\350\001\002\000\004\002\000" +
    "\001\002\000\004\005\352\001\002\000\004\027\026\001" +
    "\002\000\004\011\354\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\020\005\015\010\021\013\012\014\016\015\010\001" +
    "\001\000\010\013\341\014\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\261\012\256\001" +
    "\001\000\002\001\001\000\012\010\171\013\172\014\016" +
    "\015\010\001\001\000\010\013\170\014\016\015\010\001" +
    "\001\000\006\006\157\007\162\001\001\000\002\001\001" +
    "\000\010\013\022\014\016\015\010\001\001\000\002\001" +
    "\001\000\010\021\024\022\027\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\030\022\027\023\026\001\001\000\002\001\001\000\012" +
    "\023\103\032\154\033\104\034\102\001\001\000\012\024" +
    "\034\025\046\026\045\027\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\066\026\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\064" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\070\001\001\000\002\001\001" +
    "\000\006\025\072\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\103\032\152" +
    "\033\104\034\102\001\001\000\002\001\001\000\012\023" +
    "\103\032\150\033\104\034\102\001\001\000\012\023\103" +
    "\032\105\033\104\034\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\103\032\107" +
    "\033\104\034\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\163\007\162\001\001\000\002\001\001\000\004\020\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\173\014\016\015\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\211" +
    "\005\207\010\206\001\001\000\002\001\001\000\004\010" +
    "\225\001\001\000\002\001\001\000\010\021\212\022\027" +
    "\023\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\227\005\207\010\206\001" +
    "\001\000\010\021\230\022\027\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\244\001\001" +
    "\000\002\001\001\000\010\004\246\005\207\010\206\001" +
    "\001\000\010\021\247\022\027\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\270\012\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\302\005" +
    "\207\010\206\001\001\000\010\021\303\022\027\023\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\314\005\207\010" +
    "\206\001\001\000\002\001\001\000\010\021\315\022\027" +
    "\023\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\331\005\207\010\206\001\001\000\010\021" +
    "\332\022\027\023\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\350\005\015\010\021\013\012\014" +
    "\016\015\010\001\001\000\016\003\344\005\015\010\021" +
    "\013\012\014\016\015\010\001\001\000\002\001\001\000" +
    "\010\021\346\022\027\023\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\352\022" +
    "\027\023\026\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public  ArrayList<String> errores = new ArrayList<String>();

    @Override
    protected int error_sync_size () { return 1; }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { 
            reportar_error("Error de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    public String toStringErrores() {        
        String value = "";
        for (String error : errores)            
            value += error + "\n";
        return value;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

    @Override
    public void syntax_error(Symbol s){
        System.out.println("Se ha detectado un erro en la linea: " + s.left 
            + " columna " + s.right);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        
        //System.exit(1);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                parser.errores.add("Error en sentencia");
                parser.report_error("Error en sentencia",e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value operador_aritmetico value OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= IDENTIFIER OP_LESSLESS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= IDENTIFIER OP_PLUSPLUS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_estructura_control1 ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_estructura_control1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_estructura_control ::= cuerpo_estructura_control1 cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_estructura_control ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_aritmetico ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_aritmetico ::= OP_DIVEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_aritmetico ::= OP_MULTEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_aritmetico ::= OP_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_aritmetico ::= OP_PLUSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_aritmetico ::= OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_aritmetico ::= OP_LEFTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_aritmetico ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_aritmetico ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_aritmetico ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_aritmetico ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_aritmetico ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_aritmetico ::= OP_TWOPOINTSEGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_aritmetico ::= OP_LESSLESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_aritmetico ::= OP_PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_booleano ::= OPB_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_booleano ::= OPB_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_booleano ::= OPB_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_booleano ::= OPB_DIFERENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_booleano ::= OPB_LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_booleano ::= OPB_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_booleano ::= OPB_GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_booleano ::= OPB_GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_booleano ::= OPB_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion_booleana2 ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion_booleana2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion_booleana2 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_not ::= OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicion_not ::= OPB_NOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion_booleana ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            parser.errores.add("Error en condición booleana");
            parser.report_error("Error en condición booleana",e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion_booleana ::= RW_FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion_booleana ::= RW_TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion_booleana ::= OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion_booleana ::= condicion_not 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion_booleana ::= condicion_booleana1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.errores.add("ERROR: Falta begin para el while" + e);
                parser.report_error("ERROR: Falta begin para el while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.errores.add("ERROR: Falta do para el while" + e);
                parser.report_error("ERROR: Falta do para el while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_while ::= RW_WHILE error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.errores.add("Falta expresión en while");
                parser.report_error("Falta expresión en while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seccion_instrucciones1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // seccion_instrucciones ::= seccion_instrucciones1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= STRING_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= STRING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= SCIENTIFIC_NOTATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters_list ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura del parametros mal definida", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters ::= DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure ::= RW_PROCEDURE error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        parser.report_error("ERROR: Procedimiento estructura incorrecta", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure ::= RW_PROCEDURE IDENTIFIER error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                        parser.report_error("ERROR: Procedimiento parametros proc cuerpo incorrecto", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN error IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        parser.report_error("ERROR: Procedimiento cuerpo incorrecto", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                        parser.report_error("ERROR: Procedimiento con valor de retorno", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                        if(!id.equals(id_return)){                            
                            parser.report_error("ERROR: Identificador de procedimiento y retorno distintos", id);
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= RW_FUNCTION error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    parser.report_error("ERROR: Función estructura incorrecta", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function ::= RW_FUNCTION IDENTIFIER error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                    parser.report_error("ERROR: Función parametros proc cuerpo incorrecto", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN error IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                    parser.report_error("ERROR: Funcióm con cuerpo incorrecto", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                    parser.report_error("ERROR: Función sin valor de retorno", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                    if(!id.equals(id_return)){
                        parser.errores.add("ERROR: ID y ID de retorno distintos " + id + " != " + id_return);
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id + " != " + id_return);
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions_section ::= procedure functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions_section ::= function functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functions_section ::= procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functions_section ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_var ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.report_error("ERROR: Declaración de variable incorrecta", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_var ::= IDENTIFIER OP_COMMA declaration_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_var ::= IDENTIFIER OP_TWOPOINTS DATA_TYPE OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_variables ::= declaration_var declarations_variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations_variables ::= declaration_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables_section ::= RW_VAR declarations_variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_constant ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                parser.report_error("ERROR: Declaración de constante incorrecta ", e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_constant ::= IDENTIFIER OPB_EQUAL value OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_constants ::= declaration_constant declarations_constants 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_constants ::= declaration_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constants_section ::= RW_CONST declarations_constants 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constants_section",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optional_sections2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optional_sections2 ::= variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_sections2 ::= constants_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_sections2 ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optional_sections ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optional_sections ::= variables_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_sections ::= constants_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_sections ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_sections ::= functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_sections ::= variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_sections ::= constants_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_sections ::= constants_section variables_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                parser.report_error("Error en declaración bloques programa",e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_program ::= RW_PROGRAM error optional_sections RW_BEGIN seccion_instrucciones RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                                parser.report_error("ERROR: Programa sin IDENTIFICADOR", e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_program ::= error IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                parser.report_error("ERROR: Sin PROGRAM",e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN seccion_instrucciones RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

