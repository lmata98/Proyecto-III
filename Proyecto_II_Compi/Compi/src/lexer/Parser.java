
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
//----------------------------------------------------

package lexer;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;
import java.util.ArrayList;
import Main.Interfaz;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 25 11:56:32 CST 2018
  * @version Sun Nov 25 16:18:01 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\004\000\002\006\003" +
    "\000\002\006\004\000\002\007\006\000\002\007\004\000" +
    "\002\010\004\000\002\011\003\000\002\011\004\000\002" +
    "\012\006\000\002\012\005\000\002\012\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\014\021\000\002\014\020\000\002\014\020\000" +
    "\002\014\015\000\002\014\005\000\002\015\017\000\002" +
    "\015\020\000\002\015\016\000\002\015\015\000\002\015" +
    "\005\000\002\016\004\000\002\016\005\000\002\016\002" +
    "\000\002\016\003\000\002\017\005\000\002\017\006\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\004\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\012\000" +
    "\002\023\006\000\002\023\011\000\002\023\012\000\002" +
    "\024\011\000\002\024\007\000\002\024\010\000\002\024" +
    "\011\000\002\026\006\000\002\026\004\000\002\026\002" +
    "\000\002\025\005\000\002\025\003\000\002\027\014\000" +
    "\002\027\014\000\002\027\014\000\002\027\014\000\002" +
    "\027\014\000\002\027\014\000\002\027\014\000\002\030" +
    "\003\000\002\030\003\000\002\030\011\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\033\004\000" +
    "\002\033\006\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\036\002\000\002\036\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\007\000\002\040\007\000\002\040\011\000\002" +
    "\040\006\000\002\040\010\000\002\040\007\000\002\040" +
    "\007\000\002\040\006\000\002\040\004\000\002\040\004" +
    "\000\002\040\007\000\002\040\005\000\002\045\003\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\003\000\002\046" +
    "\003\000\002\046\004\000\002\046\002\000\002\046\003" +
    "\000\002\047\004\000\002\047\005\000\002\047\003\000" +
    "\002\044\005\000\002\044\006\000\002\044\004\000\002" +
    "\041\006\000\002\041\004\000\002\042\003\000\002\042" +
    "\003\000\002\042\004\000\002\042\004\000\002\042\003" +
    "\000\002\043\004\000\002\043\004\000\002\043\005\000" +
    "\002\043\005\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0175\000\006\003\005\020\004\001\002\000\006\003" +
    "\u016e\065\u016f\001\002\000\006\002\ufffd\065\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\014\005\ufff5\006\020\014\012\017\015\026\014\001\002" +
    "\000\010\005\uffe4\014\012\017\015\001\002\000\006\003" +
    "\u0145\065\u0146\001\002\000\004\005\ufff9\001\002\000\006" +
    "\003\u013b\065\u013c\001\002\000\006\003\u0103\065\u0104\001" +
    "\002\000\012\005\ufffb\014\012\017\015\026\014\001\002" +
    "\000\010\005\uffe5\014\012\017\015\001\002\000\006\003" +
    "\367\065\370\001\002\000\004\005\024\001\002\000\010" +
    "\005\ufffa\014\012\017\015\001\002\000\004\005\ufff6\001" +
    "\002\000\020\011\uff89\013\025\015\035\021\026\027\036" +
    "\031\031\065\040\001\002\000\006\003\312\065\313\001" +
    "\002\000\006\003\305\042\306\001\002\000\020\011\uff86" +
    "\013\uff86\015\uff86\021\uff86\027\uff86\031\uff86\065\uff86\001" +
    "\002\000\004\052\304\001\002\000\006\003\265\042\266" +
    "\001\002\000\020\011\uff84\013\uff84\015\uff84\021\uff84\027" +
    "\uff84\031\uff84\065\uff84\001\002\000\020\011\uff85\013\uff85" +
    "\015\uff85\021\uff85\027\uff85\031\uff85\065\uff85\001\002\000" +
    "\020\011\uff87\013\uff87\015\uff87\021\uff87\027\uff87\031\uff87" +
    "\065\uff87\001\002\000\006\003\234\042\235\001\002\000" +
    "\006\003\154\042\155\001\002\000\020\011\uff89\013\025" +
    "\015\035\021\026\027\036\031\031\065\040\001\002\000" +
    "\010\003\046\034\045\042\047\001\002\000\004\011\044" +
    "\001\002\000\004\052\043\001\002\000\022\010\uff7b\011" +
    "\uff7b\013\uff7b\015\uff7b\021\uff7b\027\uff7b\031\uff7b\065\uff7b" +
    "\001\002\000\004\002\uffff\001\002\000\024\032\107\033" +
    "\112\065\110\066\050\067\055\070\053\071\062\072\051" +
    "\073\052\001\002\000\004\052\106\001\002\000\024\003" +
    "\054\043\uff6e\065\057\066\050\067\055\070\053\071\062" +
    "\072\051\073\052\001\002\000\046\003\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\001\002\000\046\003\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\001\002\000\046\003\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\001\002\000\046\003\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\001\002\000\004\043" +
    "\uff6d\001\002\000\046\003\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\001\002\000\010\003\102\043\uff70\051\103\001" +
    "\002\000\022\003\uff71\035\066\036\070\037\071\040\067" +
    "\043\uff71\051\uff71\054\075\001\002\000\020\003\uff77\035" +
    "\066\036\070\037\071\040\067\043\uff77\051\uff77\001\002" +
    "\000\004\043\063\001\002\000\046\003\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\001\002\000\004\052\064\001\002" +
    "\000\022\010\uff79\011\uff79\013\uff79\015\uff79\021\uff79\027" +
    "\uff79\031\uff79\065\uff79\001\002\000\020\065\072\066\050" +
    "\067\055\070\053\071\062\072\051\073\052\001\002\000" +
    "\020\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\001\002\000\020\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\071\uff8a\072\uff8a\073\uff8a\001\002\000\020\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\001" +
    "\002\000\020\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\001\002\000\010\003\uff73\043\uff73\051" +
    "\uff73\001\002\000\010\003\uff72\043\uff72\051\uff72\001\002" +
    "\000\020\065\077\066\050\067\055\070\053\071\062\072" +
    "\051\073\052\001\002\000\016\066\050\067\055\070\053" +
    "\071\062\072\051\073\052\001\002\000\010\003\uff76\043" +
    "\uff76\051\uff76\001\002\000\010\003\uff75\043\uff75\051\uff75" +
    "\001\002\000\010\003\uff74\043\uff74\051\uff74\001\002\000" +
    "\004\043\uff6f\001\002\000\004\043\uff6a\001\002\000\020" +
    "\065\057\066\050\067\055\070\053\071\062\072\051\073" +
    "\052\001\002\000\010\003\102\043\uff6c\051\103\001\002" +
    "\000\004\043\uff6b\001\002\000\022\010\uff78\011\uff78\013" +
    "\uff78\015\uff78\021\uff78\027\uff78\031\uff78\065\uff78\001\002" +
    "\000\004\065\151\001\002\000\012\032\143\033\140\042" +
    "\142\052\141\001\002\000\042\032\126\033\133\034\117" +
    "\035\125\036\132\037\131\040\127\041\134\042\120\043" +
    "\115\044\135\045\123\046\121\047\130\050\116\052\124" +
    "\001\002\000\004\065\113\001\002\000\004\052\114\001" +
    "\002\000\022\010\uff82\011\uff82\013\uff82\015\uff82\021\uff82" +
    "\027\uff82\031\uff82\065\uff82\001\002\000\016\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\073\uff93\001\002\000\016" +
    "\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\001" +
    "\002\000\016\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\001\002\000\016\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\001\002\000\016\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\001\002\000\016\066" +
    "\050\067\055\070\053\071\062\072\051\073\052\001\002" +
    "\000\016\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073" +
    "\uff91\001\002\000\022\010\uff80\011\uff80\013\uff80\015\uff80" +
    "\021\uff80\027\uff80\031\uff80\065\uff80\001\002\000\016\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\001\002" +
    "\000\016\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\001\002\000\016\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\073\uff96\001\002\000\016\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\001\002\000\016\066\uff97" +
    "\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\001\002\000" +
    "\016\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98" +
    "\001\002\000\016\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\001\002\000\016\066\uff95\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\001\002\000\016\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\001\002\000\004" +
    "\052\137\001\002\000\022\010\uff7f\011\uff7f\013\uff7f\015" +
    "\uff7f\021\uff7f\027\uff7f\031\uff7f\065\uff7f\001\002\000\004" +
    "\052\150\001\002\000\022\010\uff7c\011\uff7c\013\uff7c\015" +
    "\uff7c\021\uff7c\027\uff7c\031\uff7c\065\uff7c\001\002\000\024" +
    "\003\054\043\uff6e\065\057\066\050\067\055\070\053\071" +
    "\062\072\051\073\052\001\002\000\004\052\144\001\002" +
    "\000\022\010\uff7e\011\uff7e\013\uff7e\015\uff7e\021\uff7e\027" +
    "\uff7e\031\uff7e\065\uff7e\001\002\000\004\043\146\001\002" +
    "\000\004\052\147\001\002\000\022\010\uff81\011\uff81\013" +
    "\uff81\015\uff81\021\uff81\027\uff81\031\uff81\065\uff81\001\002" +
    "\000\022\010\uff7d\011\uff7d\013\uff7d\015\uff7d\021\uff7d\027" +
    "\uff7d\031\uff7d\065\uff7d\001\002\000\004\052\152\001\002" +
    "\000\022\010\uff83\011\uff83\013\uff83\015\uff83\021\uff83\027" +
    "\uff83\031\uff83\065\uff83\001\002\000\004\011\uff88\001\002" +
    "\000\020\011\uff89\013\025\015\035\021\026\027\036\031" +
    "\031\065\040\001\002\000\022\003\165\012\156\024\162" +
    "\042\160\064\163\065\166\066\161\067\164\001\002\000" +
    "\006\003\uffad\043\uffad\001\002\000\004\043\217\001\002" +
    "\000\010\065\166\066\161\067\164\001\002\000\030\003" +
    "\uffa7\043\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\006\003" +
    "\uffae\043\uffae\001\002\000\006\042\206\065\205\001\002" +
    "\000\030\003\uffa6\043\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002" +
    "\000\006\003\uffac\043\uffac\001\002\000\030\003\uffa8\043" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\001\002\000\006\003\uffb0\043" +
    "\uffb0\001\002\000\024\054\173\055\174\056\172\057\201" +
    "\060\203\061\202\062\177\063\200\064\176\001\002\000" +
    "\006\003\uffb1\043\uffb1\001\002\000\012\042\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\001\002\000\012\042\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\001\002\000\012\042\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\001\002\000\010\065\166\066\161\067\164\001" +
    "\002\000\012\042\uff9d\065\uff9d\066\uff9d\067\uff9d\001\002" +
    "\000\012\042\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002\000" +
    "\012\042\uff9e\065\uff9e\066\uff9e\067\uff9e\001\002\000\012" +
    "\042\uffa2\065\uffa2\066\uffa2\067\uffa2\001\002\000\012\042" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\001\002\000\012\042\uffa1" +
    "\065\uffa1\066\uffa1\067\uffa1\001\002\000\006\003\uffa9\043" +
    "\uffa9\001\002\000\006\003\uffab\043\uffab\001\002\000\010" +
    "\065\166\066\161\067\164\001\002\000\004\043\210\001" +
    "\002\000\006\003\uffaa\043\uffaa\001\002\000\004\043\212" +
    "\001\002\000\024\054\173\055\174\056\172\057\201\060" +
    "\203\061\202\062\177\063\200\064\176\001\002\000\004" +
    "\042\214\001\002\000\010\065\166\066\161\067\164\001" +
    "\002\000\004\043\216\001\002\000\006\003\uffaf\043\uffaf" +
    "\001\002\000\006\003\220\007\221\001\002\000\020\011" +
    "\uff89\013\025\015\035\021\026\027\036\031\031\065\040" +
    "\001\002\000\006\003\222\005\223\001\002\000\020\011" +
    "\uff89\013\025\015\035\021\026\027\036\031\031\065\040" +
    "\001\002\000\020\011\uff89\013\025\015\035\021\026\027" +
    "\036\031\031\065\040\001\002\000\004\011\225\001\002" +
    "\000\020\011\uffc5\013\uffc5\015\uffc5\021\uffc5\027\uffc5\031" +
    "\uffc5\065\uffc5\001\002\000\004\011\227\001\002\000\020" +
    "\011\uffc2\013\uffc2\015\uffc2\021\uffc2\027\uffc2\031\uffc2\065" +
    "\uffc2\001\002\000\004\011\231\001\002\000\020\011\uffc3" +
    "\013\uffc3\015\uffc3\021\uffc3\027\uffc3\031\uffc3\065\uffc3\001" +
    "\002\000\004\011\233\001\002\000\020\011\uffc4\013\uffc4" +
    "\015\uffc4\021\uffc4\027\uffc4\031\uffc4\065\uffc4\001\002\000" +
    "\004\005\262\001\002\000\022\003\165\012\156\024\162" +
    "\042\160\064\163\065\166\066\161\067\164\001\002\000" +
    "\006\003\237\043\240\001\002\000\012\005\243\021\026" +
    "\031\031\065\040\001\002\000\006\003\241\022\242\001" +
    "\002\000\012\005\243\021\026\031\031\065\040\001\002" +
    "\000\012\005\243\021\026\031\031\065\040\001\002\000" +
    "\020\011\uff89\013\025\015\035\021\026\027\036\031\031" +
    "\065\040\001\002\000\022\010\uffb9\011\uffb9\013\uffb9\015" +
    "\uffb9\021\uffb9\027\uffb9\031\uffb9\065\uffb9\001\002\000\022" +
    "\010\246\011\uffbb\013\uffbb\015\uffbb\021\uffbb\027\uffbb\031" +
    "\uffbb\065\uffbb\001\002\000\012\005\250\021\026\031\031" +
    "\065\040\001\002\000\020\011\uffc1\013\uffc1\015\uffc1\021" +
    "\uffc1\027\uffc1\031\uffc1\065\uffc1\001\002\000\020\011\uff89" +
    "\013\025\015\035\021\026\027\036\031\031\065\040\001" +
    "\002\000\020\011\uffbc\013\uffbc\015\uffbc\021\uffbc\027\uffbc" +
    "\031\uffbc\065\uffbc\001\002\000\004\011\253\001\002\000" +
    "\020\011\uffbd\013\uffbd\015\uffbd\021\uffbd\027\uffbd\031\uffbd" +
    "\065\uffbd\001\002\000\004\011\255\001\002\000\022\010" +
    "\uffba\011\uffba\013\uffba\015\uffba\021\uffba\027\uffba\031\uffba" +
    "\065\uffba\001\002\000\022\010\246\011\uffbb\013\uffbb\015" +
    "\uffbb\021\uffbb\027\uffbb\031\uffbb\065\uffbb\001\002\000\020" +
    "\011\uffbe\013\uffbe\015\uffbe\021\uffbe\027\uffbe\031\uffbe\065" +
    "\uffbe\001\002\000\022\010\246\011\uffbb\013\uffbb\015\uffbb" +
    "\021\uffbb\027\uffbb\031\uffbb\065\uffbb\001\002\000\020\011" +
    "\uffbf\013\uffbf\015\uffbf\021\uffbf\027\uffbf\031\uffbf\065\uffbf" +
    "\001\002\000\020\011\uff89\013\025\015\035\021\026\027" +
    "\036\031\031\065\040\001\002\000\004\011\264\001\002" +
    "\000\020\011\uffc0\013\uffc0\015\uffc0\021\uffc0\027\uffc0\031" +
    "\uffc0\065\uffc0\001\002\000\004\052\uff65\001\002\000\022" +
    "\003\267\065\270\066\050\067\055\070\053\071\062\072" +
    "\051\073\052\001\002\000\004\043\uff60\001\002\000\010" +
    "\003\274\043\uff64\051\275\001\002\000\010\003\274\043" +
    "\uff63\051\275\001\002\000\004\043\273\001\002\000\004" +
    "\052\uff66\001\002\000\004\043\uff5b\001\002\000\020\065" +
    "\277\066\050\067\055\070\053\071\062\072\051\073\052" +
    "\001\002\000\004\043\uff61\001\002\000\010\003\274\043" +
    "\uff5f\051\275\001\002\000\010\003\274\043\uff5e\051\275" +
    "\001\002\000\004\043\uff5c\001\002\000\004\043\uff5d\001" +
    "\002\000\004\043\uff62\001\002\000\022\010\uff7a\011\uff7a" +
    "\013\uff7a\015\uff7a\021\uff7a\027\uff7a\031\uff7a\065\uff7a\001" +
    "\002\000\004\052\uff67\001\002\000\006\043\310\065\307" +
    "\001\002\000\004\043\311\001\002\000\004\052\uff69\001" +
    "\002\000\004\052\uff68\001\002\000\004\034\356\001\002" +
    "\000\006\003\315\034\314\001\002\000\004\066\325\001" +
    "\002\000\004\066\316\001\002\000\004\023\317\001\002" +
    "\000\004\066\320\001\002\000\004\007\321\001\002\000" +
    "\004\005\322\001\002\000\020\011\uff89\013\025\015\035" +
    "\021\026\027\036\031\031\065\040\001\002\000\004\011" +
    "\324\001\002\000\020\011\uffb6\013\uffb6\015\uffb6\021\uffb6" +
    "\027\uffb6\031\uffb6\065\uffb6\001\002\000\006\003\326\023" +
    "\327\001\002\000\004\066\351\001\002\000\006\003\330" +
    "\066\331\001\002\000\004\007\345\001\002\000\006\003" +
    "\332\007\333\001\002\000\004\005\342\001\002\000\006" +
    "\003\334\005\335\001\002\000\020\011\uff89\013\025\015" +
    "\035\021\026\027\036\031\031\065\040\001\002\000\020" +
    "\011\uff89\013\025\015\035\021\026\027\036\031\031\065" +
    "\040\001\002\000\004\011\337\001\002\000\020\011\uffb8" +
    "\013\uffb8\015\uffb8\021\uffb8\027\uffb8\031\uffb8\065\uffb8\001" +
    "\002\000\004\011\341\001\002\000\020\011\uffb2\013\uffb2" +
    "\015\uffb2\021\uffb2\027\uffb2\031\uffb2\065\uffb2\001\002\000" +
    "\020\011\uff89\013\025\015\035\021\026\027\036\031\031" +
    "\065\040\001\002\000\004\011\344\001\002\000\020\011" +
    "\uffb3\013\uffb3\015\uffb3\021\uffb3\027\uffb3\031\uffb3\065\uffb3" +
    "\001\002\000\004\005\346\001\002\000\020\011\uff89\013" +
    "\025\015\035\021\026\027\036\031\031\065\040\001\002" +
    "\000\004\011\350\001\002\000\020\011\uffb4\013\uffb4\015" +
    "\uffb4\021\uffb4\027\uffb4\031\uffb4\065\uffb4\001\002\000\004" +
    "\007\352\001\002\000\004\005\353\001\002\000\020\011" +
    "\uff89\013\025\015\035\021\026\027\036\031\031\065\040" +
    "\001\002\000\004\011\355\001\002\000\020\011\uffb5\013" +
    "\uffb5\015\uffb5\021\uffb5\027\uffb5\031\uffb5\065\uffb5\001\002" +
    "\000\004\066\357\001\002\000\004\023\360\001\002\000" +
    "\004\066\361\001\002\000\004\007\362\001\002\000\004" +
    "\005\363\001\002\000\020\011\uff89\013\025\015\035\021" +
    "\026\027\036\031\031\065\040\001\002\000\004\011\365" +
    "\001\002\000\020\011\uffb7\013\uffb7\015\uffb7\021\uffb7\027" +
    "\uffb7\031\uffb7\065\uffb7\001\002\000\020\005\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\026\ufff0\027\ufff0\001\002\000" +
    "\004\052\376\001\002\000\004\054\373\001\002\000\024" +
    "\003\367\005\uffef\013\uffef\014\uffef\015\uffef\017\uffef\026" +
    "\uffef\027\uffef\065\370\001\002\000\020\005\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\026\uffee\027\uffee\001\002\000" +
    "\016\066\050\067\055\070\053\071\062\072\051\073\052" +
    "\001\002\000\004\052\375\001\002\000\024\003\uffed\005" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\026\uffed\027\uffed" +
    "\065\uffed\001\002\000\024\003\uffec\005\uffec\013\uffec\014" +
    "\uffec\015\uffec\017\uffec\026\uffec\027\uffec\065\uffec\001\002" +
    "\000\004\005\uffe3\001\002\000\010\005\ufff8\014\012\017" +
    "\015\001\002\000\004\005\ufff7\001\002\000\004\005\ufffc" +
    "\001\002\000\004\011\u0139\001\002\000\006\003\u0105\042" +
    "\u0106\001\002\000\004\005\u0131\001\002\000\010\003\u0108" +
    "\004\u0107\043\uffd5\001\002\000\004\065\u012a\001\002\000" +
    "\004\043\uffd4\001\002\000\004\043\u010a\001\002\000\006" +
    "\003\u010b\005\u010c\001\002\000\004\005\u0122\001\002\000" +
    "\016\003\u010f\006\020\013\ufff1\015\ufff1\026\014\027\ufff1" +
    "\001\002\000\010\013\ufff2\015\ufff2\027\ufff2\001\002\000" +
    "\012\013\ufff3\015\ufff3\026\014\027\ufff3\001\002\000\004" +
    "\065\u011c\001\002\000\010\013\025\015\035\027\036\001" +
    "\002\000\012\013\uffc7\015\uffc7\027\uffc7\065\uffc7\001\002" +
    "\000\012\013\uffc6\015\uffc6\027\uffc6\065\uffc6\001\002\000" +
    "\004\065\u0117\001\002\000\012\013\025\015\035\027\036" +
    "\065\uffc9\001\002\000\012\013\uffc8\015\uffc8\027\uffc8\065" +
    "\uffc8\001\002\000\004\065\uffca\001\002\000\004\034\u0118" +
    "\001\002\000\016\066\050\067\055\070\053\071\062\072" +
    "\051\073\052\001\002\000\004\052\u011a\001\002\000\004" +
    "\011\u011b\001\002\000\010\005\uffdc\014\uffdc\017\uffdc\001" +
    "\002\000\004\034\u011d\001\002\000\016\066\050\067\055" +
    "\070\053\071\062\072\051\073\052\001\002\000\004\052" +
    "\u011f\001\002\000\004\011\u0120\001\002\000\010\005\uffda" +
    "\014\uffda\017\uffda\001\002\000\010\013\ufff4\015\ufff4\027" +
    "\ufff4\001\002\000\014\006\020\013\ufff1\015\ufff1\026\014" +
    "\027\ufff1\001\002\000\010\013\025\015\035\027\036\001" +
    "\002\000\004\065\u0125\001\002\000\004\034\u0126\001\002" +
    "\000\016\066\050\067\055\070\053\071\062\072\051\073" +
    "\052\001\002\000\004\052\u0128\001\002\000\004\011\u0129" +
    "\001\002\000\010\005\uffdb\014\uffdb\017\uffdb\001\002\000" +
    "\010\003\u012b\043\uffd7\051\u012c\001\002\000\004\043\uffd1" +
    "\001\002\000\004\004\u012e\001\002\000\004\043\uffd6\001" +
    "\002\000\004\065\u012f\001\002\000\010\003\u012b\043\uffd3" +
    "\051\u012c\001\002\000\004\043\uffd2\001\002\000\014\006" +
    "\020\013\ufff1\015\ufff1\026\014\027\ufff1\001\002\000\010" +
    "\013\025\015\035\027\036\001\002\000\004\065\u0134\001" +
    "\002\000\004\034\u0135\001\002\000\016\066\050\067\055" +
    "\070\053\071\062\072\051\073\052\001\002\000\004\052" +
    "\u0137\001\002\000\004\011\u0138\001\002\000\010\005\uffd9" +
    "\014\uffd9\017\uffd9\001\002\000\010\005\uffd8\014\uffd8\017" +
    "\uffd8\001\002\000\022\003\u013b\005\uffea\013\uffea\014\uffea" +
    "\015\uffea\017\uffea\027\uffea\065\u013c\001\002\000\004\052" +
    "\u0143\001\002\000\006\051\u013f\053\u013e\001\002\000\016" +
    "\005\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\027\uffeb\001" +
    "\002\000\004\004\u0141\001\002\000\006\003\u013b\065\u013c" +
    "\001\002\000\022\003\uffe7\005\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\027\uffe7\065\uffe7\001\002\000\004\052\u0142" +
    "\001\002\000\022\003\uffe8\005\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\027\uffe8\065\uffe8\001\002\000\022\003\uffe6" +
    "\005\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\027\uffe6\065" +
    "\uffe6\001\002\000\016\005\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\027\uffe9\001\002\000\004\011\u016c\001\002\000" +
    "\006\003\u0147\042\u0148\001\002\000\004\005\u0164\001\002" +
    "\000\010\003\u0108\004\u0107\043\uffd5\001\002\000\004\043" +
    "\u014a\001\002\000\006\003\u014c\053\u014b\001\002\000\004" +
    "\004\u0155\001\002\000\004\005\u014d\001\002\000\014\006" +
    "\020\013\ufff1\015\ufff1\026\014\027\ufff1\001\002\000\010" +
    "\013\025\015\035\027\036\001\002\000\004\065\u0150\001" +
    "\002\000\004\034\u0151\001\002\000\016\066\050\067\055" +
    "\070\053\071\062\072\051\073\052\001\002\000\004\052" +
    "\u0153\001\002\000\004\011\u0154\001\002\000\010\005\uffe0" +
    "\014\uffe0\017\uffe0\001\002\000\004\005\u0156\001\002\000" +
    "\016\003\u0157\006\020\013\ufff1\015\ufff1\026\014\027\ufff1" +
    "\001\002\000\004\065\u015f\001\002\000\010\013\025\015" +
    "\035\027\036\001\002\000\004\065\u015a\001\002\000\004" +
    "\034\u015b\001\002\000\016\066\050\067\055\070\053\071" +
    "\062\072\051\073\052\001\002\000\004\052\u015d\001\002" +
    "\000\004\011\u015e\001\002\000\010\005\uffe1\014\uffe1\017" +
    "\uffe1\001\002\000\004\034\u0160\001\002\000\016\066\050" +
    "\067\055\070\053\071\062\072\051\073\052\001\002\000" +
    "\004\052\u0162\001\002\000\004\011\u0163\001\002\000\010" +
    "\005\uffdf\014\uffdf\017\uffdf\001\002\000\014\006\020\013" +
    "\ufff1\015\ufff1\026\014\027\ufff1\001\002\000\010\013\025" +
    "\015\035\027\036\001\002\000\004\065\u0167\001\002\000" +
    "\004\034\u0168\001\002\000\016\066\050\067\055\070\053" +
    "\071\062\072\051\073\052\001\002\000\004\052\u016a\001" +
    "\002\000\004\011\u016b\001\002\000\010\005\uffde\014\uffde" +
    "\017\uffde\001\002\000\010\005\uffdd\014\uffdd\017\uffdd\001" +
    "\002\000\004\005\uffe2\001\002\000\014\005\ufff5\006\020" +
    "\014\012\017\015\026\014\001\002\000\014\005\ufff5\006" +
    "\020\014\012\017\015\026\014\001\002\000\004\005\u0171" +
    "\001\002\000\020\011\uff89\013\025\015\035\021\026\027" +
    "\036\031\031\065\040\001\002\000\004\011\u0173\001\002" +
    "\000\004\002\000\001\002\000\004\005\u0175\001\002\000" +
    "\020\011\uff89\013\025\015\035\021\026\027\036\031\031" +
    "\065\040\001\002\000\004\011\u0177\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0175\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\020\005\015\010\021\013\012\014\016\015\010\001" +
    "\001\000\010\013\u016c\014\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u013c\012\u0139\001" +
    "\001\000\002\001\001\000\012\010\377\013\u0100\014\016" +
    "\015\010\001\001\000\010\013\376\014\016\015\010\001" +
    "\001\000\006\006\365\007\370\001\001\000\002\001\001" +
    "\000\010\013\022\014\016\015\010\001\001\000\002\001" +
    "\001\000\022\023\033\024\026\027\032\036\040\037\036" +
    "\040\031\041\027\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\033" +
    "\024\026\027\032\036\152\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\110\001\001\000\002\001\001\000\010\020\057\045\055" +
    "\046\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\100\001\001\000\004\050\073\001" +
    "\001\000\004\050\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\077\001\001\000\004\020\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\057\045\103" +
    "\001\001\000\004\047\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\057\045\055\046\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\033\024\026\027\032" +
    "\036\231\037\036\040\031\041\027\044\041\001\001\000" +
    "\012\030\156\031\170\032\167\033\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\210\032\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\206\032\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\212\001\001\000\002" +
    "\001\001\000\006\031\214\032\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\033" +
    "\024\026\027\032\036\227\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\022\023\033\024\026" +
    "\027\032\036\225\037\036\040\031\041\027\044\041\001" +
    "\001\000\022\023\033\024\026\027\032\036\223\037\036" +
    "\040\031\041\027\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\235\031\170\032\167" +
    "\033\166\001\001\000\002\001\001\000\012\025\257\040" +
    "\243\041\027\044\041\001\001\000\002\001\001\000\012" +
    "\025\255\040\243\041\027\044\041\001\001\000\012\025" +
    "\244\040\243\041\027\044\041\001\001\000\022\023\033" +
    "\024\026\027\032\036\253\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\004\026\246\001\001" +
    "\000\010\040\250\041\027\044\041\001\001\000\002\001" +
    "\001\000\022\023\033\024\026\027\032\036\251\037\036" +
    "\040\031\041\027\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\256\001\001\000\002\001\001\000" +
    "\004\026\260\001\001\000\002\001\001\000\022\023\033" +
    "\024\026\027\032\036\262\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\270\042\271\001\001\000\002\001" +
    "\001\000\004\043\302\001\001\000\004\043\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\277\001\001\000\002\001\001\000\004\043\301" +
    "\001\001\000\004\043\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\033\024\026\027\032\036\322\037\036\040\031\041" +
    "\027\044\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\033\024\026\027\032\036\337\037" +
    "\036\040\031\041\027\044\041\001\001\000\022\023\033" +
    "\024\026\027\032\036\335\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\033\024\026\027" +
    "\032\036\342\037\036\040\031\041\027\044\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\033\024\026\027\032\036\346\037\036\040\031" +
    "\041\027\044\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\033" +
    "\024\026\027\032\036\353\037\036\040\031\041\027\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\033\024\026\027\032" +
    "\036\363\037\036\040\031\041\027\044\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\371\007\370\001" +
    "\001\000\002\001\001\000\004\020\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\u0101\014\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\u010f\005\u010d\010\u010c" +
    "\001\001\000\002\001\001\000\004\010\u0120\001\001\000" +
    "\002\001\001\000\014\021\u0112\022\u0113\023\u0114\024\u0110" +
    "\027\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\u0115\022\u0113\023\u0114\024\u0110" +
    "\027\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\u0122\005" +
    "\u010d\010\u010c\001\001\000\014\021\u0123\022\u0113\023\u0114" +
    "\024\u0110\027\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u012f\001\001\000\002\001\001\000" +
    "\010\004\u0131\005\u010d\010\u010c\001\001\000\014\021\u0132" +
    "\022\u0113\023\u0114\024\u0110\027\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u0143\012\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\u014d\005\u010d" +
    "\010\u010c\001\001\000\014\021\u014e\022\u0113\023\u0114\024" +
    "\u0110\027\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0157" +
    "\005\u010d\010\u010c\001\001\000\002\001\001\000\014\021" +
    "\u0158\022\u0113\023\u0114\024\u0110\027\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u015b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\u0164\005\u010d" +
    "\010\u010c\001\001\000\014\021\u0165\022\u0113\023\u0114\024" +
    "\u0110\027\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\u0173\005\015\010\021\013\012\014\016\015" +
    "\010\001\001\000\016\003\u016f\005\015\010\021\013\012" +
    "\014\016\015\010\001\001\000\002\001\001\000\022\023" +
    "\033\024\026\027\032\036\u0171\037\036\040\031\041\027" +
    "\044\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\033\024\026\027\032\036\u0175" +
    "\037\036\040\031\041\027\044\041\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<String> errores = new ArrayList<String>();

/*Declaracion de variables para*/
    public static  Lexer lex;
    int errors = 0;
    static boolean inCiclo=false;
    static ArrayList<String> errSemantic = new ArrayList<>();
    static ArrayList<ObjetoTabla> tablaSimbolos = new ArrayList<>();
/* lista_vars Contiene identificadores de una sola linea c,d,f int -> int para valores */
    static ArrayList<String> lista_vars = new ArrayList<>();
    static ArrayList<String[]> lista_params = new ArrayList<>();
    static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    static String funActual;
    static String tipoActual;
 

      void main(String entrada,Interfaz console) {
        funActual=null;
        inCiclo=false;
        tipoActual="null";
        funciones = new ArrayList<>();
     
        tablaSimbolos = new ArrayList<>();
        lista_vars = new ArrayList<>();
        lista_params = new ArrayList<>();
        errSemantic = new ArrayList<>();
     
          try {
             Reader reader = new BufferedReader(new FileReader(entrada));
             lex = new Lexer(reader);
            
            Parser parser = new Parser(lex);
            parser.parse();
            System.out.println("CA,MILA");
            console.imprimir(lex.toStringErrores());
            console.imprimir(parser.toStringErrores());
            parser.printTablaSimbolos();
            System.out.println("PPPPPPPPPPPPPPPPPPPPPPPP");
            printTablaSimbolos();
            
          }
          catch (Exception e) {
            e.printStackTrace(System.out);
            System.exit(1);
          }
   
    }

    String linea()
   {
       return  lex.current_line();
    }
 

//***********************************************Funcion Main***********************************************//


//**********************************Funcionalidad de la Tabla de Simbolos**********************************//
//*********************************************************************************************************// 
    static boolean agregarSimbolo(Object nombre, Object tipo, String scope, String linea){
          for(ObjetoTabla sim:tablaSimbolos){
              if(nombre.equals(sim.getNombre()) && scope.equals(sim.getScope())){
                  errSemantic.add("Declaracion doble de variable: "+nombre+" antigua: "+sim.getLinea()+"\t nueva: "+linea);
                  return false;
              }
          }
          
          ObjetoTabla nuevoS = new ObjetoTabla(nombre, tipo, scope, linea);
          System.out.println("Se agrego el simbolo :"+nuevoS.toString());
          tablaSimbolos.add(nuevoS);

          return true;
        }

     void addListaVar(){
        for(String ss: Parser.lista_vars){
          agregarSimbolo(ss,tipoActual,getFunction(),lex.current_line());
        }
        lista_vars = new ArrayList<>();
    }

    static void addListaParam(){
        ArrayList<String> funcs = new ArrayList<>();
        funcs.add(funActual);
        for(String[] ss: Parser.lista_params){
          funcs.add(ss[0].toString());

        }
        funciones.add(funcs);
        lista_params = new ArrayList<>();
    }

     boolean useSymbol(Object name){
        for(ObjetoTabla sym:tablaSimbolos){
            String[] func=sym.getTipo().toString().split(" ");
            if(func[0].equals("Funcion") && name.equals(sym.getNombre()))
              return true;
            if(sym.getScope().equals("Global") && name.equals(sym.getNombre()))
              return true;
            if(name.equals(sym.getNombre()) && (getFunction().equals(sym.getScope())))
              return true;        
      }
      errSemantic.add("Error en variable **"+name+"**uso de variable no declarada "+lex.current_line());
      return false;
    } 
     } 

    static String getFunction(){
      if (funActual != null && !funActual.isEmpty())
          return funActual;
      else
        return "Global";
    }

    static void addPar(Object par, String func){
      // for(ArrayList<> a: funciones){

      // }
      int a=2;

    }

    static void printTablaSimbolos(){
      try {
        String arch = "TablaSimbolos.txt";
        BufferedWriter out = new BufferedWriter(new FileWriter(arch));
        int cont=0;
        for(ObjetoTabla s: tablaSimbolos){
          out.write(cont+"=>"+s.toString());
          out.newLine();
          cont++;
        }
        out.close();
      } catch (IOException ex) {
        Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    static void erroresSemanticos(){
      try {
        String arch = "ErroresCompilador.txt";
        BufferedWriter out = new BufferedWriter(new FileWriter(arch));
        int cont=0;
        for(String s: errSemantic){
          out.write(cont+"=>"+s);
          out.newLine();
          cont++;
        }
        out.close();
      } catch (IOException ex) {
        Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    public String toStringErrores() {        
        String value = "";
        for (String error : errores)            
            value += error + "\n";
        return value;
    }

    @Override
    protected int error_sync_size () { return 1; }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }    
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }



    @Override
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.out.println("ENTRO");
        //System.exit(1);
    }

    public void reportar_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        System.out.println(m.toString());
        errores.add(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // params_list_write ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura del parametros de llamada a función mal definida", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // params_list_write ::= OP_COMMA value params_list_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // params_list_write ::= OP_COMMA IDENTIFIER params_list_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // params_list_write ::= OP_COMMA value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // params_list_write ::= OP_COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_write",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // parameters_write ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura de paramatro en WRITE incorrecta", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parameters_write ::= value params_list_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parameters_write ::= IDENTIFIER params_list_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parameters_write ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parameters_write ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // write_funct_call ::= RW_WRITE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Llamada incorrecta a función WRITE", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_funct_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // write_funct_call ::= RW_WRITE OP_LEFTPARENTHESIS parameters_write OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("write_funct_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // read_funct_call ::= RW_READ error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Llamada incorrecta a función READ", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // read_funct_call ::= RW_READ OP_LEFTPARENTHESIS IDENTIFIER OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // read_funct_call ::= RW_READ OP_LEFTPARENTHESIS OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_funct_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // params_list_funt_call ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                parser.report_error("ERROR: Estructura del parametros mal definida en llamada de función", e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // params_list_funt_call ::= OP_COMMA values_params params_list_funt_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // params_list_funt_call ::= OP_COMMA values_params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_list_funt_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // params_funct_call ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura de paramatro incorrecta en llamada de función", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // params_funct_call ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // params_funct_call ::= values_params params_list_funt_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // params_funct_call ::= values_params 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_funct_call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // values_params ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // values_params ::= value operador_aritmetico1 value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // values_params ::= value operador_aritmetico1 IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // values_params ::= IDENTIFIER operador_aritmetico1 value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // values_params ::= IDENTIFIER operador_aritmetico1 IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // values_params ::= IDENTIFIER OPB_EQUAL value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // values_params ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values_params",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia ::= IDENTIFIER error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    parser.report_error("Error en sentencia", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia ::= IDENTIFIER OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia ::= write_funct_call OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia ::= read_funct_call OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_LESSLESS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_PLUSPLUS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value operador_aritmetico value OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL IDENTIFIER OP_LEFTPARENTHESIS params_funct_call OP_RIGHTPARENTHESIS OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL OP_LESSLESS IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia ::= IDENTIFIER OP_TWOPOINTSEGUAL OP_PLUSPLUS IDENTIFIER OP_SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo_estructura_control1 ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpo_estructura_control1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo_estructura_control1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo_estructura_control1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_estructura_control ::= cuerpo_estructura_control1 cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo_estructura_control ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador_aritmetico1 ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador_aritmetico1 ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador_aritmetico1 ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operador_aritmetico1 ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operador_aritmetico ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador_aritmetico ::= OP_DIVEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_aritmetico ::= OP_MULTEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_aritmetico ::= OP_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_aritmetico ::= OP_PLUSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_aritmetico ::= OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_aritmetico ::= OP_LEFTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_aritmetico ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_aritmetico ::= OP_DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_aritmetico ::= OP_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador_aritmetico ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_aritmetico ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_aritmetico ::= OP_TWOPOINTSEGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operador_aritmetico ::= OP_LESSLESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operador_aritmetico ::= OP_PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operador_booleano ::= OPB_NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_booleano ::= OPB_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador_booleano ::= OPB_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operador_booleano ::= OPB_DIFERENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_booleano ::= OPB_LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_booleano ::= OPB_LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_booleano ::= OPB_GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_booleano ::= OPB_GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_booleano ::= OPB_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion_booleana2 ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion_booleana2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion_booleana2 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion_not ::= OPB_NOT OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion_not ::= OPB_NOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion_booleana ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            parser.report_error("Error en condición booleana",e);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion_booleana ::= RW_FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion_booleana ::= RW_TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion_booleana ::= OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS operador_booleano OP_LEFTPARENTHESIS condicion_booleana1 OP_RIGHTPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion_booleana ::= condicion_not 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion_booleana ::= condicion_booleana1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                        parser.report_error("Error: Falta BEGIN en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO error RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
                        parser.report_error("Error: Falta DO en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO error RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                        parser.report_error("Error: Falta entero en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO error ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        parser.report_error("Error: Falta TO en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloque_for ::= RW_FOR IDENTIFIER error ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        parser.report_error("Error: en asignación en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloque_for ::= RW_FOR error OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                        parser.report_error("Error: en identificador en FOR", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloque_for ::= RW_FOR IDENTIFIER OP_TWOPOINTSEGUAL ENTERO RW_TO ENTERO RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // block_optional_if ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_optional_if",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // block_optional_if ::= RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_optional_if",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // block_optional_else ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // block_optional_else ::= RW_ELSE sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // block_optional_else ::= RW_ELSE RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_optional_else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error block_optional_if block_optional_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		                     
                    parser.report_error("Error: falta THEN en IF", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana error block_optional_if block_optional_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    parser.report_error("Error: falta paréntesis cerrar en IF", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_if ::= RW_IF error RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    parser.report_error("Error: falta paréntesis abrir en IF", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_if ::= RW_IF OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_THEN block_optional_if block_optional_else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.report_error("ERROR: Falta begin para el while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.report_error("ERROR: Falta do para el while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_while ::= RW_WHILE error cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.report_error("Falta expresión en while", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_while ::= RW_WHILE OP_LEFTPARENTHESIS condicion_booleana OP_RIGHTPARENTHESIS RW_DO RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // seccion_instrucciones1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seccion_instrucciones1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seccion_instrucciones1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seccion_instrucciones ::= seccion_instrucciones1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= NUMERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= STRING_BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= STRING_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= SCIENTIFIC_NOTATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters_list ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            parser.report_error("ERROR: Estructura del parametros mal definida", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters_list ::= OP_COMMA DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        parser.report_error("ERROR: Estructura de paramatro incorrecta", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters ::= DATA_TYPE IDENTIFIER parameters_list 
            {
              Object RESULT =null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure ::= RW_PROCEDURE error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        parser.report_error("ERROR: Procedimiento estructura incorrecta", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure ::= RW_PROCEDURE IDENTIFIER error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                        parser.report_error("ERROR: Procedimiento parametros proc cuerpo incorrecto", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN error IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                        parser.report_error("ERROR: Procedimiento cuerpo incorrecto", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                        parser.report_error("ERROR: Procedimiento con valor de retorno", e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure ::= RW_PROCEDURE IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                        if(!id.equals(id_return)){                            
                            parser.report_error("ERROR: Identificador de procedimiento y retorno distintos", id);
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function ::= RW_FUNCTION error RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    parser.report_error("ERROR: Función estructura incorrecta", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function ::= RW_FUNCTION IDENTIFIER error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                    parser.report_error("ERROR: Función parametros proc cuerpo incorrecto", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN error IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                    parser.report_error("ERROR: Funcióm con cuerpo incorrecto", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS error RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                    parser.report_error("ERROR: Función sin valor de retorno", e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= RW_FUNCTION IDENTIFIER OP_LEFTPARENTHESIS parameters OP_RIGHTPARENTHESIS OP_TWOPOINTS DATA_TYPE RW_BEGIN optional_sections2 seccion_instrucciones IDENTIFIER OP_TWOPOINTSEGUAL value OP_SEMI RW_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int id_returnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id_returnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id_return = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                    if(!id.equals(id_return)){
                        parser.report_error("ERROR: ID y ID de retorno distintos ", id);
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions_section ::= procedure functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions_section ::= function functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functions_section ::= procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functions_section ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_section",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_var ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.report_error("ERROR: Declaración de variable incorrecta", e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_var ::= IDENTIFIER OP_COMMA declaration_var 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		parser.agregarSimbolo(q, "Var", parser.getFunction(),  "Linea: "+String.valueOf(Parser.lex.current_line()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_var ::= IDENTIFIER OP_TWOPOINTS DATA_TYPE OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_variables ::= declaration_var declarations_variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations_variables ::= declaration_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables_section ::= RW_VAR declarations_variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_constant ::= error OP_SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                parser.report_error("ERROR: Declaración de constante incorrecta ", e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_constant ::= IDENTIFIER OPB_EQUAL value OP_SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_constant",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_constants ::= declaration_constant declarations_constants 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_constants ::= declaration_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations_constants",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constants_section ::= RW_CONST declarations_constants 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constants_section",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optional_sections2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optional_sections2 ::= variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_sections2 ::= constants_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_sections2 ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optional_sections ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optional_sections ::= variables_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optional_sections ::= constants_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optional_sections ::= constants_section variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_sections ::= functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_sections ::= variables_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_sections ::= constants_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_sections ::= constants_section variables_section functions_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_sections",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                parser.report_error("Error en declaración bloques programa",e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_program ::= RW_PROGRAM error optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                                parser.report_error("ERROR: Programa sin IDENTIFICADOR", e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_program ::= error IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                parser.report_error("ERROR: Sin PROGRAM",e);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_program ::= RW_PROGRAM IDENTIFIER optional_sections RW_BEGIN cuerpo_estructura_control RW_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

