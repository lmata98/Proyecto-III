/* The following code was generated by JFlex 1.7.0 */

package lexer;
import java_cup.runtime.*;
import jflex.ScannerException;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.*;
import java.io.Reader;

class Yytoken {
    
    private int id; //Identificador Ãºnico para cada TOKEN
    private String name; //Nombre del TOKEN
    private Types_Tokens type;  //Tipo del TOKEN (Identificador, Operador, Palabra Reservada, Literal)
    private ArrayList<Line> lines = new ArrayList<>();  //Arreglos de lineas y ocurrencias
    
    public Yytoken(int id, String name, Types_Tokens type) {
        this.id = id;
        this.name = name;
        this.type = type;
    }

    @Override
    public String toString() {
        String token = name + "\t" + "\t" + type + "\t" + "\t" + lines;
        return token;
    }

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }
    
    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the type
     */
    public Types_Tokens getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(Types_Tokens type) {
        this.type = type;
    }

    /**
     * @return the lines
     */
    public ArrayList<Line> getLines() {
        return lines;
    }

    /**
     * @param lines the lines to set
     */
    public void setLines(ArrayList<Line> lines) {
        this.lines = lines;        
    }
    
}

/********** Seccion de opciones y declaraciones de JFlex **********/

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\12\1\12\1\11\22\0\1\1\1\0\1\52"+
    "\1\53\4\0\1\2\1\4\1\3\1\76\1\73\1\50\1\46\1\7"+
    "\1\54\11\45\1\75\1\74\1\101\1\77\1\100\2\0\1\17\1\13"+
    "\1\27\1\55\1\16\1\57\1\41\1\30\1\35\2\51\1\15\1\65"+
    "\1\20\1\14\1\63\1\51\1\31\1\43\1\36\1\61\1\67\1\71"+
    "\3\51\6\0\1\25\1\21\1\32\1\56\1\24\1\60\1\42\1\33"+
    "\1\37\2\51\1\23\1\66\1\26\1\22\1\64\1\51\1\34\1\44"+
    "\1\40\1\62\1\70\1\72\3\51\1\5\1\47\1\6\7\0\1\12"+
    "\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\2\27\7\1\10\1\1\1\11\2\1\1\10\16\7"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1"+
    "\1\21\1\2\1\1\1\2\1\22\3\7\1\23\1\24"+
    "\23\7\1\25\1\26\11\7\1\1\1\10\2\0\1\27"+
    "\1\30\2\0\1\31\1\32\1\1\1\33\24\7\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\0\1\1\1\0"+
    "\5\7\1\42\1\43\1\44\12\7\1\45\10\7\1\1"+
    "\1\10\1\46\1\0\1\47\1\0\1\32\1\1\1\50"+
    "\1\51\10\7\1\52\1\53\4\7\1\2\1\0\4\7"+
    "\1\54\4\7\1\45\1\55\1\7\1\56\1\57\4\7"+
    "\1\1\1\10\1\60\1\0\1\32\1\1\20\7\1\61"+
    "\3\7\1\62\4\7\1\1\1\10\1\1\1\63\2\7"+
    "\1\64\4\7\1\65\1\66\6\7\1\45\1\7\1\1"+
    "\1\10\1\1\7\7\1\45\2\7\1\1\1\10\1\1"+
    "\3\7\1\67\2\7\1\45\1\1\1\10\1\1\1\70"+
    "\3\7\1\1\1\10\1\1\1\71\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\1\1\10\1\1\1\7\1\1\1\10"+
    "\1\1\1\7\1\10\2\1\1\0\367\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[1019];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\102\0\u0108\0\u014a"+
    "\0\u018c\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\102\0\102\0\u0ce4\0\u0d26"+
    "\0\102\0\u0d68\0\u0daa\0\u0dec\0\102\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\102\0\u0ef4\0\u0f36\0\u0f78\0\u0ef4\0\u0ef4\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c"+
    "\0\u145e\0\u0ef4\0\u0ef4\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\102\0\102\0\u0882\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u0ef4"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\u1e2a\0\u1e6c\0\u1eae\0\u0e2e\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u1ef0\0\u1ef0\0\u1ef0\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c"+
    "\0\u1ef0\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\102\0\u183c\0\u25e6"+
    "\0\u2628\0\u1ef0\0\u1ef0\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u1ef0\0\u1ef0\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u1e6c\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u29c4"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u29c4\0\u29c4\0\u2bd4\0\u29c4"+
    "\0\u29c4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2da2\0\102\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u31c2\0\u3246\0\u3288\0\u32ca\0\u31c2"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u31c2"+
    "\0\u34da\0\u351c\0\u31c2\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u31c2"+
    "\0\u31c2\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u3666"+
    "\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0"+
    "\0\u3a02\0\u3a44\0\u3a86\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e"+
    "\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3a86\0\u3cd8\0\u3d1a\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3d1a\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8"+
    "\0\u3f2a\0\u3f6c\0\u3ea6\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6"+
    "\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6"+
    "\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6"+
    "\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6"+
    "\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136"+
    "\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346"+
    "\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556"+
    "\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766"+
    "\0\u57a8\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976"+
    "\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86"+
    "\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96"+
    "\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6"+
    "\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6"+
    "\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6"+
    "\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6"+
    "\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06"+
    "\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16"+
    "\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026"+
    "\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236"+
    "\0\u7278\0\u72ba\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u7404\0\u7446"+
    "\0\u7488\0\u74ca\0\u750c\0\u754e\0\u7590\0\u75d2\0\u7614\0\u7656"+
    "\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0\0\u77e2\0\u7824\0\u7866"+
    "\0\u78a8\0\u78ea\0\u792c\0\u796e\0\u79b0\0\u79f2\0\u7a34\0\u7a76"+
    "\0\u7ab8\0\u7afa\0\u7b3c\0\u7b7e\0\u7bc0\0\u7c02\0\u7c44\0\u7c86"+
    "\0\u7cc8\0\u7d0a\0\u7d4c\0\u7d8e\0\u7dd0\0\u7e12\0\u7e54\0\u7e96"+
    "\0\u7ed8\0\u7f1a\0\u7f5c\0\u7f9e\0\u7fe0\0\u8022\0\u8064\0\u80a6"+
    "\0\u80e8\0\u812a\0\u816c\0\u81ae\0\u81f0\0\u8232\0\u8274\0\u82b6"+
    "\0\u82f8\0\u833a\0\u837c\0\u83be\0\u8400\0\u8442\0\u8484\0\u84c6"+
    "\0\u8508\0\u854a\0\u858c\0\u85ce\0\u8610\0\u8652\0\u8694\0\u86d6"+
    "\0\u8718\0\u875a\0\u879c\0\u87de\0\u8820\0\u8862\0\u88a4\0\u88e6"+
    "\0\u8928\0\u896a\0\u89ac\0\u89ee\0\u8a30\0\u8a72\0\u8ab4\0\u8af6"+
    "\0\u8b38\0\u8b7a\0\u8bbc\0\u8bfe\0\u8c40\0\u8c82\0\u8cc4\0\u8d06"+
    "\0\u8d48\0\u8d8a\0\u8dcc\0\u8e0e\0\u8e50\0\u8e92\0\u8ed4\0\u8f16"+
    "\0\u8f58\0\u8f9a\0\u8fdc\0\u901e\0\u9060\0\u90a2\0\u90e4\0\u9126"+
    "\0\u9168\0\u91aa\0\u91ec\0\u922e\0\u9270\0\u92b2\0\u92f4\0\u9336"+
    "\0\u9378\0\u93ba\0\u93fc\0\u943e\0\u9480\0\u94c2\0\u9504\0\u9546"+
    "\0\u9588\0\u95ca\0\u960c\0\u964e\0\u9690\0\u96d2\0\u9714\0\u9756"+
    "\0\u9798\0\u97da\0\u981c\0\u985e\0\u98a0\0\u98e2\0\u9924\0\u9966"+
    "\0\u99a8\0\u99ea\0\u9a2c\0\u9a6e\0\u9ab0\0\u9af2\0\u9b34\0\u9b76"+
    "\0\u9bb8\0\u9bfa\0\u9c3c\0\u9c7e\0\u9cc0\0\u9d02\0\u9d44\0\u9d86"+
    "\0\u9dc8\0\u9e0a\0\u9e4c\0\u9e8e\0\u9ed0\0\u9f12\0\u9f54\0\u9f96"+
    "\0\u9fd8\0\ua01a\0\ua05c\0\ua09e\0\ua0e0\0\ua122\0\ua164\0\ua1a6"+
    "\0\ua1e8\0\ua22a\0\ua26c\0\ua2ae\0\ua2f0\0\ua332\0\ua374\0\ua3b6"+
    "\0\ua3f8\0\ua43a\0\ua47c\0\ua4be\0\ua500\0\ua542\0\ua584\0\ua5c6"+
    "\0\ua608\0\ua64a\0\ua68c\0\ua6ce\0\ua710\0\ua752\0\ua794\0\ua7d6"+
    "\0\ua818\0\ua85a\0\ua89c\0\ua8de\0\ua920\0\ua962\0\ua9a4\0\ua9e6"+
    "\0\uaa28\0\uaa6a\0\uaaac\0\uaaee\0\uab30\0\uab72\0\uabb4\0\uabf6"+
    "\0\uac38\0\uac7a\0\uacbc\0\uacfe\0\uad40\0\uad82\0\uadc4\0\uae06"+
    "\0\uae48\0\uae8a\0\uaecc\0\uaf0e\0\uaf50\0\uaf92\0\uafd4\0\ub016"+
    "\0\ub058\0\ub09a\0\ub0dc\0\ub11e\0\ub160\0\ub1a2\0\ub1e4\0\ub226"+
    "\0\ub268\0\ub2aa\0\ub2ec\0\ub32e\0\ub370\0\ub3b2\0\ub3f4\0\ub436"+
    "\0\ub478\0\ub4ba\0\ub4fc\0\ub53e\0\ub580\0\ub5c2\0\ub604\0\ub646"+
    "\0\ub688\0\ub6ca\0\ub70c\0\ub74e\0\ub790\0\ub7d2\0\ub814\0\ub856"+
    "\0\ub898\0\ub8da\0\ub91c\0\ub8da\0\ub95e\0\ub9a0\0\ub9e2\0\uba24"+
    "\0\uba66\0\ubaa8\0\ubaea\0\ubb2c\0\ubb6e\0\ubbb0\0\ubbf2\0\ubc34"+
    "\0\ubc76\0\ubcb8\0\ubcfa\0\ubd3c\0\ubd7e\0\ubdc0\0\ube02\0\ube44"+
    "\0\ube86\0\ubec8\0\ubf0a\0\ubf4c\0\ubf8e\0\ubfd0\0\uc012\0\uc054"+
    "\0\uc096\0\uc0d8\0\uc11a\0\uc15c\0\uc19e\0\uc1e0\0\uc222\0\uc264"+
    "\0\uc2a6\0\uc2e8\0\uc32a\0\uc36c\0\uc3ae\0\uc3f0\0\uc432\0\uc474"+
    "\0\uc4b6\0\uc4f8\0\uc53a\0\uc57c\0\uc5be\0\uc600\0\uc642\0\uc684"+
    "\0\uc6c6\0\uc708\0\uc74a\0\uc78c\0\uc7ce\0\uc810\0\uc852\0\uc894"+
    "\0\uc8d6\0\uc918\0\uc95a\0\uc99c\0\uc9de\0\uca20\0\uca62\0\ucaa4"+
    "\0\ucae6\0\ucb28\0\ucb6a\0\ucbac\0\ucbee\0\ucc30\0\ucc72\0\uccb4"+
    "\0\uccf6\0\ucd38\0\ucd7a\0\ucdbc\0\ucdfe\0\uce40\0\uce82\0\ucec4"+
    "\0\ucf06\0\ucf48\0\ucf8a\0\ucfcc\0\ud00e\0\ud050\0\ud092\0\ud0d4"+
    "\0\ud116\0\ud158\0\ud19a\0\ud1dc\0\ud21e\0\ud260\0\ud2a2\0\ud2e4"+
    "\0\ud326\0\ud368\0\ud3aa\0\ud3ec\0\ud42e\0\ud470\0\ud4b2\0\ud4f4"+
    "\0\ud536\0\ud578\0\ud5ba\0\ud5fc\0\ud63e\0\ud680\0\ud6c2\0\ud704"+
    "\0\ud746\0\ud788\0\ud7ca\0\ud80c\0\ud84e\0\ud890\0\ud8d2\0\ud914"+
    "\0\ud956\0\ud998\0\ud9da\0\uda1c\0\uda5e\0\udaa0\0\udae2\0\udb24"+
    "\0\udb66\0\udba8\0\udbea\0\udc2c\0\udc6e\0\udcb0\0\udcf2\0\udd34"+
    "\0\udd76\0\uddb8\0\uddfa\0\ude3c\0\ude7e\0\udec0\0\udf02\0\udf44"+
    "\0\udf86\0\udfc8\0\ue00a\0\ue04c\0\ue08e\0\ue0d0\0\ue112\0\ue154"+
    "\0\ue196\0\ue1d8\0\ue21a\0\ue25c\0\ue29e\0\ue2e0\0\ue322\0\ue364"+
    "\0\ue3a6\0\ue3e8\0\ue42a\0\ue46c\0\ue4ae\0\ue4f0\0\ue532\0\ue574"+
    "\0\ue5b6\0\ue5f8\0\ue63a\0\ue67c\0\ue6be\0\ue700\0\ue742\0\ue784"+
    "\0\ue7c6\0\ue808\0\ue84a\0\ue88c\0\ue8ce\0\ue910\0\ue952\0\ue994"+
    "\0\ue9d6\0\uea18\0\uea5a\0\uea9c\0\ueade\0\ueb20\0\ueb62\0\ueba4"+
    "\0\uebe6\0\uec28\0\uec6a\0\uecac\0\uecee\0\ued30\0\ued72\0\uedb4"+
    "\0\uedf6\0\uee38\0\uee7a\0\ueebc\0\ueefe\0\uef40\0\uef82\0\uefc4"+
    "\0\uf006\0\uf048\0\uf08a\0\uf0cc\0\uf10e\0\uf150\0\uf192\0\uf1d4"+
    "\0\uf216\0\uf258\0\uf29a\0\uf2dc\0\uf31e\0\uf360\0\uf3a2\0\uf3e4"+
    "\0\uf426\0\uf468\0\uf4aa\0\uf4ec\0\uf52e\0\uf570\0\uf5b2\0\uf5f4"+
    "\0\uf636\0\uf678\0\uf6ba\0\uf6fc\0\uf73e\0\uf780\0\uf7c2\0\uf804"+
    "\0\uf846\0\uf888\0\uf8ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1019];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\3\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\27\1\32\1\33\1\34\1\35"+
    "\1\36\2\27\1\37\1\40\1\41\1\42\1\2\1\43"+
    "\1\27\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\105\0\1\74\175\0\1\75\2\0\6\7\1\76"+
    "\1\7\3\77\67\7\7\0\1\100\67\0\1\101\12\0"+
    "\1\3\104\0\1\102\1\103\1\102\1\104\27\102\3\0"+
    "\1\102\2\0\17\102\22\0\16\102\1\105\14\102\3\0"+
    "\1\102\2\0\3\102\1\106\13\102\22\0\1\102\1\107"+
    "\31\102\3\0\1\102\2\0\17\102\22\0\2\102\1\110"+
    "\2\102\1\111\25\102\3\0\1\102\2\0\17\102\22\0"+
    "\5\102\1\112\25\102\3\0\1\102\2\0\17\102\22\0"+
    "\1\102\1\113\31\102\3\0\1\102\2\0\17\102\22\0"+
    "\7\102\1\114\1\102\1\115\21\102\3\0\1\102\2\0"+
    "\17\102\22\0\21\102\1\105\11\102\3\0\1\102\2\0"+
    "\4\102\1\106\12\102\22\0\7\102\1\116\23\102\3\0"+
    "\1\102\2\0\17\102\22\0\10\102\1\117\2\102\1\120"+
    "\17\102\3\0\1\102\2\0\17\102\22\0\13\102\1\121"+
    "\17\102\3\0\1\102\2\0\17\102\22\0\7\102\1\122"+
    "\23\102\3\0\1\102\2\0\17\102\22\0\1\102\1\123"+
    "\13\102\1\124\15\102\3\0\1\102\2\0\17\102\22\0"+
    "\33\102\3\0\1\102\2\0\17\102\22\0\3\102\1\125"+
    "\27\102\3\0\1\102\2\0\17\102\22\0\7\102\1\126"+
    "\10\102\1\127\12\102\3\0\1\102\2\0\17\102\22\0"+
    "\11\102\1\130\21\102\3\0\1\102\2\0\17\102\22\0"+
    "\5\102\1\131\25\102\3\0\1\102\2\0\3\102\1\132"+
    "\13\102\22\0\1\102\1\133\13\102\1\134\1\135\14\102"+
    "\3\0\1\102\2\0\17\102\22\0\13\102\1\136\17\102"+
    "\3\0\1\102\2\0\4\102\1\132\12\102\22\0\7\102"+
    "\1\133\10\102\1\137\1\140\11\102\3\0\1\102\2\0"+
    "\17\102\22\0\15\102\1\141\5\102\1\142\7\102\3\0"+
    "\1\102\2\0\17\102\22\0\20\102\1\143\4\102\1\144"+
    "\5\102\3\0\1\102\2\0\17\102\22\0\32\145\1\146"+
    "\1\147\2\0\1\145\2\0\1\146\16\145\54\0\1\150"+
    "\6\0\1\150\75\0\1\151\26\0\1\152\2\0\10\153"+
    "\3\154\37\153\1\155\27\153\45\0\1\156\6\0\1\156"+
    "\40\0\32\145\1\157\1\147\2\0\1\145\2\0\1\157"+
    "\16\145\22\0\1\102\1\160\20\102\1\161\10\102\3\0"+
    "\1\102\2\0\17\102\22\0\7\102\1\160\14\102\1\162"+
    "\6\102\3\0\1\102\2\0\17\102\22\0\1\102\1\163"+
    "\2\102\1\164\26\102\3\0\1\102\2\0\5\102\1\165"+
    "\11\102\22\0\7\102\1\166\2\102\1\167\20\102\3\0"+
    "\1\102\2\0\6\102\1\170\10\102\22\0\5\102\1\171"+
    "\25\102\3\0\1\102\2\0\17\102\22\0\13\102\1\172"+
    "\17\102\3\0\1\102\2\0\17\102\22\0\16\102\1\173"+
    "\14\102\3\0\1\102\2\0\17\102\22\0\21\102\1\174"+
    "\11\102\3\0\1\102\2\0\17\102\22\0\1\102\1\175"+
    "\31\102\3\0\1\102\2\0\17\102\22\0\7\102\1\176"+
    "\23\102\3\0\1\102\2\0\17\102\22\0\4\102\1\177"+
    "\26\102\3\0\1\102\2\0\17\102\22\0\12\102\1\200"+
    "\20\102\3\0\1\102\2\0\17\102\22\0\15\102\1\201"+
    "\1\202\14\102\3\0\1\102\2\0\17\102\22\0\20\102"+
    "\1\203\1\204\11\102\3\0\1\102\2\0\17\102\106\0"+
    "\1\205\100\0\1\206\1\207\101\0\1\210\101\0\1\211"+
    "\1\212\1\0\3\74\1\213\1\214\3\74\3\215\67\74"+
    "\6\216\1\76\1\216\3\0\67\216\6\77\1\3\73\77"+
    "\10\100\3\0\67\100\13\0\33\217\3\0\1\217\2\0"+
    "\17\217\22\0\1\217\1\220\31\217\3\0\1\217\2\0"+
    "\17\217\22\0\26\217\1\221\4\217\3\0\1\217\2\0"+
    "\17\217\22\0\5\217\1\222\25\217\3\0\1\217\2\0"+
    "\17\217\22\0\30\217\1\223\2\217\3\0\1\217\2\0"+
    "\17\217\22\0\33\217\3\0\1\217\2\0\1\217\1\224"+
    "\15\217\22\0\33\217\3\0\1\217\2\0\1\217\1\225"+
    "\15\217\22\0\23\217\1\226\7\217\3\0\1\217\2\0"+
    "\17\217\22\0\7\217\1\227\23\217\3\0\1\217\2\0"+
    "\17\217\22\0\27\217\1\230\3\217\3\0\1\217\2\0"+
    "\17\217\22\0\13\217\1\231\17\217\3\0\1\217\2\0"+
    "\17\217\22\0\31\217\1\232\1\217\3\0\1\217\2\0"+
    "\17\217\22\0\33\217\3\0\1\217\2\0\2\217\1\224"+
    "\14\217\22\0\33\217\3\0\1\217\2\0\2\217\1\225"+
    "\14\217\22\0\25\217\1\226\5\217\3\0\1\217\2\0"+
    "\17\217\22\0\5\217\1\233\25\217\3\0\1\217\2\0"+
    "\17\217\22\0\4\217\1\234\26\217\3\0\1\217\2\0"+
    "\17\217\22\0\4\217\1\235\26\217\3\0\1\217\2\0"+
    "\17\217\22\0\13\217\1\236\17\217\3\0\1\217\2\0"+
    "\17\217\22\0\12\217\1\237\20\217\3\0\1\217\2\0"+
    "\17\217\22\0\12\217\1\240\20\217\3\0\1\217\2\0"+
    "\17\217\22\0\23\217\1\241\7\217\3\0\1\217\2\0"+
    "\17\217\22\0\3\217\1\242\27\217\3\0\1\217\2\0"+
    "\17\217\22\0\33\217\3\0\1\217\2\0\5\217\1\243"+
    "\11\217\22\0\25\217\1\241\5\217\3\0\1\217\2\0"+
    "\17\217\22\0\11\217\1\244\21\217\3\0\1\217\2\0"+
    "\17\217\22\0\33\217\3\0\1\217\2\0\6\217\1\245"+
    "\10\217\22\0\1\217\1\246\31\217\3\0\1\217\2\0"+
    "\17\217\22\0\16\217\1\247\14\217\3\0\1\217\2\0"+
    "\17\217\22\0\7\217\1\250\23\217\3\0\1\217\2\0"+
    "\17\217\22\0\21\217\1\251\11\217\3\0\1\217\2\0"+
    "\17\217\22\0\33\252\3\0\1\252\2\0\17\252\22\0"+
    "\32\252\1\253\1\147\2\0\1\252\2\0\1\253\16\252"+
    "\54\0\1\254\6\0\1\254\43\0\1\255\5\0\1\255"+
    "\20\0\1\150\1\0\1\255\4\0\1\150\25\0\52\154"+
    "\1\256\27\154\10\257\3\0\37\257\1\155\27\257\45\0"+
    "\1\260\6\0\1\260\40\0\32\252\1\261\1\147\2\0"+
    "\1\252\2\0\1\261\16\252\22\0\33\217\3\0\1\217"+
    "\2\0\13\217\1\262\3\217\22\0\33\217\3\0\1\217"+
    "\2\0\14\217\1\262\2\217\22\0\16\217\1\263\14\217"+
    "\3\0\1\217\2\0\17\217\22\0\2\217\1\264\30\217"+
    "\3\0\1\217\2\0\17\217\22\0\5\217\1\265\25\217"+
    "\3\0\1\217\2\0\17\217\22\0\21\217\1\263\11\217"+
    "\3\0\1\217\2\0\17\217\22\0\10\217\1\266\22\217"+
    "\3\0\1\217\2\0\17\217\22\0\13\217\1\267\17\217"+
    "\3\0\1\217\2\0\17\217\22\0\23\217\1\270\7\217"+
    "\3\0\1\217\2\0\17\217\22\0\25\217\1\271\5\217"+
    "\3\0\1\217\2\0\17\217\22\0\1\217\1\272\31\217"+
    "\3\0\1\217\2\0\17\217\22\0\7\217\1\273\23\217"+
    "\3\0\1\217\2\0\17\217\22\0\33\217\3\0\1\217"+
    "\2\0\1\217\1\274\15\217\22\0\33\217\3\0\1\217"+
    "\2\0\2\217\1\274\14\217\22\0\16\217\1\275\14\217"+
    "\3\0\1\217\2\0\17\217\22\0\21\217\1\275\11\217"+
    "\3\0\1\217\2\0\17\217\22\0\22\217\1\276\10\217"+
    "\3\0\1\217\2\0\17\217\22\0\22\217\1\277\10\217"+
    "\3\0\1\217\2\0\17\217\22\0\24\217\1\300\6\217"+
    "\3\0\1\217\2\0\17\217\22\0\24\217\1\301\6\217"+
    "\3\0\1\217\2\0\17\217\7\0\3\214\1\213\1\302"+
    "\3\214\3\0\72\214\1\213\4\214\3\0\67\214\3\215"+
    "\1\303\1\0\75\215\13\0\33\304\3\0\1\304\2\0"+
    "\17\304\22\0\2\304\1\305\30\304\3\0\1\304\2\0"+
    "\17\304\22\0\22\304\1\306\10\304\3\0\1\304\2\0"+
    "\17\304\22\0\26\304\1\307\4\304\3\0\1\304\2\0"+
    "\17\304\22\0\3\304\1\310\27\304\3\0\1\304\2\0"+
    "\17\304\22\0\10\304\1\311\22\304\3\0\1\304\2\0"+
    "\17\304\22\0\24\304\1\312\6\304\3\0\1\304\2\0"+
    "\17\304\22\0\27\304\1\313\3\304\3\0\1\304\2\0"+
    "\17\304\22\0\11\304\1\310\21\304\3\0\1\304\2\0"+
    "\17\304\22\0\30\304\1\314\2\304\3\0\1\304\2\0"+
    "\17\304\22\0\16\304\1\315\14\304\3\0\1\304\2\0"+
    "\17\304\22\0\2\304\1\315\30\304\3\0\1\304\2\0"+
    "\1\304\1\316\15\304\22\0\31\304\1\317\1\304\3\0"+
    "\1\304\2\0\17\304\22\0\21\304\1\315\11\304\3\0"+
    "\1\304\2\0\17\304\22\0\10\304\1\315\22\304\3\0"+
    "\1\304\2\0\2\304\1\316\14\304\22\0\5\304\1\320"+
    "\25\304\3\0\1\304\2\0\17\304\22\0\3\304\1\321"+
    "\27\304\3\0\1\304\2\0\17\304\22\0\13\304\1\320"+
    "\17\304\3\0\1\304\2\0\17\304\22\0\11\304\1\321"+
    "\21\304\3\0\1\304\2\0\17\304\22\0\16\304\1\322"+
    "\14\304\3\0\1\304\2\0\17\304\22\0\22\304\1\323"+
    "\10\304\3\0\1\304\2\0\17\304\22\0\21\304\1\324"+
    "\11\304\3\0\1\304\2\0\17\304\22\0\24\304\1\325"+
    "\6\304\3\0\1\304\2\0\17\304\22\0\33\326\3\0"+
    "\1\326\2\0\17\326\22\0\32\326\1\327\1\147\2\0"+
    "\1\326\2\0\1\327\16\326\25\0\1\255\5\0\1\255"+
    "\20\0\1\254\1\0\1\255\4\0\1\254\72\0\1\330"+
    "\2\0\1\331\3\0\1\330\21\0\1\331\50\0\1\332"+
    "\6\0\1\332\40\0\32\326\1\333\1\147\2\0\1\326"+
    "\2\0\1\333\16\326\22\0\30\304\1\334\2\304\3\0"+
    "\1\304\2\0\17\304\22\0\14\304\1\335\16\304\3\0"+
    "\1\304\2\0\17\304\22\0\31\304\1\336\1\304\3\0"+
    "\1\304\2\0\17\304\22\0\17\304\1\337\13\304\3\0"+
    "\1\304\2\0\17\304\22\0\22\304\1\340\10\304\3\0"+
    "\1\304\2\0\17\304\22\0\24\304\1\341\6\304\3\0"+
    "\1\304\2\0\17\304\22\0\14\304\1\342\11\304\1\343"+
    "\4\304\3\0\1\304\2\0\17\304\22\0\17\304\1\344"+
    "\7\304\1\345\3\304\3\0\1\304\2\0\17\304\22\0"+
    "\2\304\1\346\30\304\3\0\1\304\2\0\17\304\22\0"+
    "\23\304\1\347\7\304\3\0\1\304\2\0\17\304\22\0"+
    "\10\304\1\350\22\304\3\0\1\304\2\0\17\304\22\0"+
    "\25\304\1\351\5\304\3\0\1\304\2\0\17\304\13\0"+
    "\1\3\110\0\33\352\3\0\1\352\2\0\17\352\22\0"+
    "\3\352\1\353\27\352\3\0\1\352\2\0\17\352\22\0"+
    "\5\352\1\354\25\352\3\0\1\352\2\0\17\352\22\0"+
    "\22\352\1\355\10\352\3\0\1\352\2\0\17\352\22\0"+
    "\11\352\1\356\21\352\3\0\1\352\2\0\17\352\22\0"+
    "\13\352\1\354\17\352\3\0\1\352\2\0\17\352\22\0"+
    "\24\352\1\357\6\352\3\0\1\352\2\0\17\352\22\0"+
    "\23\352\1\360\7\352\3\0\1\352\2\0\17\352\22\0"+
    "\25\352\1\360\5\352\3\0\1\352\2\0\17\352\22\0"+
    "\23\352\1\361\7\352\3\0\1\352\2\0\17\352\22\0"+
    "\5\352\1\362\25\352\3\0\1\352\2\0\17\352\22\0"+
    "\25\352\1\363\5\352\3\0\1\352\2\0\17\352\22\0"+
    "\13\352\1\364\17\352\3\0\1\352\2\0\17\352\22\0"+
    "\33\365\3\0\1\365\2\0\17\365\22\0\32\365\1\366"+
    "\1\147\2\0\1\365\2\0\1\366\16\365\54\0\1\330"+
    "\6\0\1\330\40\0\32\365\1\367\1\147\2\0\1\365"+
    "\2\0\1\367\16\365\22\0\3\352\1\370\27\352\3\0"+
    "\1\352\2\0\17\352\22\0\23\352\1\371\7\352\3\0"+
    "\1\352\2\0\17\352\22\0\11\352\1\370\21\352\3\0"+
    "\1\352\2\0\17\352\22\0\25\352\1\372\5\352\3\0"+
    "\1\352\2\0\17\352\22\0\2\352\1\373\30\352\3\0"+
    "\1\352\2\0\17\352\22\0\10\352\1\373\22\352\3\0"+
    "\1\352\2\0\17\352\22\0\3\352\1\374\27\352\3\0"+
    "\1\352\2\0\17\352\22\0\16\352\1\375\14\352\3\0"+
    "\1\352\2\0\17\352\22\0\11\352\1\376\21\352\3\0"+
    "\1\352\2\0\17\352\22\0\21\352\1\377\11\352\3\0"+
    "\1\352\2\0\17\352\22\0\3\352\1\u0100\27\352\3\0"+
    "\1\352\2\0\17\352\22\0\3\352\1\u0101\27\352\3\0"+
    "\1\352\2\0\17\352\22\0\11\352\1\u0100\21\352\3\0"+
    "\1\352\2\0\17\352\22\0\11\352\1\u0101\21\352\3\0"+
    "\1\352\2\0\17\352\22\0\33\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\4\u0102\1\u0103\26\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\5\u0102\1\u0104\25\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\12\u0102\1\u0105\20\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\13\u0102\1\u0106\17\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\22\u0102\1\u0107\10\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\26\u0102\1\u0108\4\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\24\u0102\1\u0109\6\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\27\u0102\1\u0108\3\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\33\u010a\3\0\1\u010a\2\0\17\u010a\22\0"+
    "\32\u010a\1\u010b\1\147\2\0\1\u010a\2\0\1\u010b\16\u010a"+
    "\22\0\32\u010a\1\u010c\1\147\2\0\1\u010a\2\0\1\u010c"+
    "\16\u010a\22\0\22\u0102\1\u010d\10\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\24\u0102\1\u010e\6\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\33\u0102\3\0\1\u0102\2\0\1\u0102\1\u010f"+
    "\15\u0102\22\0\4\u0102\1\u0110\26\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\33\u0102\3\0\1\u0102\2\0\2\u0102\1\u0111"+
    "\14\u0102\22\0\12\u0102\1\u0112\20\u0102\3\0\1\u0102\2\0"+
    "\17\u0102\22\0\33\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\5\u0113\1\u0114\25\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\23\u0113\1\u0114\7\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\13\u0113\1\u0114\17\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\25\u0113\1\u0114\5\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\5\u0113\1\u0115\25\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\13\u0113\1\u0116\17\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\33\u0117\3\0\1\u0117\2\0\17\u0117\22\0\32\u0117\1\u0118"+
    "\1\147\2\0\1\u0117\2\0\1\u0118\16\u0117\22\0\32\u0117"+
    "\1\u0119\1\147\2\0\1\u0117\2\0\1\u0119\16\u0117\22\0"+
    "\1\u0113\1\u011a\31\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\7\u0113\1\u011b\23\u0113\3\0\1\u0113\2\0\17\u0113\22\0"+
    "\33\u0113\3\0\1\u0113\2\0\5\u0113\1\u011c\11\u0113\22\0"+
    "\33\u0113\3\0\1\u0113\2\0\11\u0113\1\u011d\5\u0113\22\0"+
    "\33\u0113\3\0\1\u0113\2\0\6\u0113\1\u011e\10\u0113\22\0"+
    "\33\u0113\3\0\1\u0113\2\0\12\u0113\1\u011d\4\u0113\22\0"+
    "\33\u011f\3\0\1\u011f\2\0\17\u011f\22\0\23\u011f\1\u0120"+
    "\7\u011f\3\0\1\u011f\2\0\17\u011f\22\0\25\u011f\1\u0120"+
    "\5\u011f\3\0\1\u011f\2\0\17\u011f\22\0\33\u0121\3\0"+
    "\1\u0121\2\0\17\u0121\22\0\32\u0121\1\u0122\1\147\2\0"+
    "\1\u0121\2\0\1\u0122\16\u0121\22\0\32\u0121\1\u0123\1\147"+
    "\2\0\1\u0121\2\0\1\u0123\16\u0121\22\0\5\u011f\1\u0124"+
    "\25\u011f\3\0\1\u011f\2\0\17\u011f\22\0\13\u011f\1\u0124"+
    "\17\u011f\3\0\1\u011f\2\0\17\u011f\22\0\16\u011f\1\u0125"+
    "\14\u011f\3\0\1\u011f\2\0\17\u011f\22\0\21\u011f\1\u0126"+
    "\11\u011f\3\0\1\u011f\2\0\17\u011f\22\0\33\u0127\3\0"+
    "\1\u0127\2\0\17\u0127\22\0\33\u0128\3\0\1\u0128\2\0"+
    "\17\u0128\22\0\32\u0128\1\u0129\1\147\2\0\1\u0128\2\0"+
    "\1\u0129\16\u0128\22\0\32\u0128\1\u012a\1\147\2\0\1\u0128"+
    "\2\0\1\u012a\16\u0128\22\0\3\u0127\1\u012b\27\u0127\3\0"+
    "\1\u0127\2\0\17\u0127\22\0\11\u0127\1\u012b\21\u0127\3\0"+
    "\1\u0127\2\0\17\u0127\22\0\33\u012c\3\0\1\u012c\2\0"+
    "\17\u012c\22\0\33\u012d\3\0\1\u012d\2\0\17\u012d\22\0"+
    "\32\u012d\1\u012e\1\147\2\0\1\u012d\2\0\1\u012e\16\u012d"+
    "\22\0\32\u012d\1\u012f\1\147\2\0\1\u012d\2\0\1\u012f"+
    "\16\u012d\22\0\33\u0130\3\0\1\u0130\2\0\17\u0130\22\0"+
    "\33\u0131\3\0\1\u0131\2\0\17\u0131\22\0\32\u0131\1\u0132"+
    "\1\147\2\0\1\u0131\2\0\1\u0132\16\u0131\22\0\32\u0131"+
    "\1\u0133\1\147\2\0\1\u0131\2\0\1\u0133\16\u0131\22\0"+
    "\33\u0134\3\0\1\u0134\2\0\17\u0134\22\0\33\u0135\3\0"+
    "\1\u0135\2\0\17\u0135\22\0\32\u0135\1\u0136\1\147\2\0"+
    "\1\u0135\2\0\1\u0136\16\u0135\22\0\32\u0135\1\u0137\1\147"+
    "\2\0\1\u0135\2\0\1\u0137\16\u0135\22\0\33\u0138\3\0"+
    "\1\u0138\2\0\17\u0138\22\0\33\u0139\3\0\1\u0139\2\0"+
    "\17\u0139\22\0\32\u0139\1\u013a\1\147\2\0\1\u0139\2\0"+
    "\1\u013a\16\u0139\22\0\32\u0139\1\u013b\1\147\2\0\1\u0139"+
    "\2\0\1\u013b\16\u0139\22\0\33\u013c\3\0\1\u013c\2\0"+
    "\17\u013c\22\0\33\u013d\3\0\1\u013d\2\0\17\u013d\22\0"+
    "\32\u013d\1\u013e\1\147\2\0\1\u013d\2\0\1\u013e\16\u013d"+
    "\22\0\32\u013d\1\u013f\1\147\2\0\1\u013d\2\0\1\u013f"+
    "\16\u013d\22\0\33\u0140\3\0\1\u0140\2\0\17\u0140\22\0"+
    "\33\u0141\3\0\1\u0141\2\0\17\u0141\22\0\32\u0141\1\u0142"+
    "\1\147\2\0\1\u0141\2\0\1\u0142\16\u0141\22\0\32\u0141"+
    "\1\u0143\1\147\2\0\1\u0141\2\0\1\u0143\16\u0141\22\0"+
    "\33\u0144\3\0\1\u0144\2\0\17\u0144\22\0\33\u0145\3\0"+
    "\1\u0145\2\0\17\u0145\22\0\32\u0145\1\u0146\1\147\2\0"+
    "\1\u0145\2\0\1\u0146\16\u0145\22\0\32\u0145\1\u0147\1\147"+
    "\2\0\1\u0145\2\0\1\u0147\16\u0145\22\0\33\u0148\3\0"+
    "\1\u0148\2\0\17\u0148\22\0\33\u0149\3\0\1\u0149\2\0"+
    "\17\u0149\22\0\32\u0149\1\u014a\1\147\2\0\1\u0149\2\0"+
    "\1\u014a\16\u0149\22\0\32\u0149\1\u014b\1\147\2\0\1\u0149"+
    "\2\0\1\u014b\16\u0149\22\0\33\u014c\3\0\1\u014c\2\0"+
    "\17\u014c\22\0\33\u014d\3\0\1\u014d\2\0\17\u014d\22\0"+
    "\32\u014d\1\u014e\1\147\2\0\1\u014d\2\0\1\u014e\16\u014d"+
    "\22\0\32\u014d\1\u014f\1\147\2\0\1\u014d\2\0\1\u014f"+
    "\16\u014d\22\0\33\u0150\3\0\1\u0150\2\0\17\u0150\22\0"+
    "\33\u0151\3\0\1\u0151\2\0\17\u0151\22\0\32\u0151\1\u0152"+
    "\1\147\2\0\1\u0151\2\0\1\u0152\16\u0151\22\0\32\u0151"+
    "\1\u0153\1\147\2\0\1\u0151\2\0\1\u0153\16\u0151\22\0"+
    "\33\u0154\3\0\1\u0154\2\0\17\u0154\22\0\33\u0155\3\0"+
    "\1\u0155\2\0\17\u0155\22\0\32\u0155\1\u0156\1\147\2\0"+
    "\1\u0155\2\0\1\u0156\16\u0155\22\0\32\u0155\1\u0157\1\147"+
    "\2\0\1\u0155\2\0\1\u0157\16\u0155\22\0\33\u0158\3\0"+
    "\1\u0158\2\0\17\u0158\22\0\33\u0159\3\0\1\u0159\2\0"+
    "\17\u0159\22\0\32\u0159\1\u015a\1\147\2\0\1\u0159\2\0"+
    "\1\u015a\16\u0159\22\0\32\u0159\1\u015b\1\147\2\0\1\u0159"+
    "\2\0\1\u015b\16\u0159\22\0\33\u015c\3\0\1\u015c\2\0"+
    "\17\u015c\22\0\33\u015d\3\0\1\u015d\2\0\17\u015d\22\0"+
    "\32\u015d\1\u015e\1\147\2\0\1\u015d\2\0\1\u015e\16\u015d"+
    "\22\0\32\u015d\1\u015f\1\147\2\0\1\u015d\2\0\1\u015f"+
    "\16\u015d\22\0\33\u0160\3\0\1\u0160\2\0\17\u0160\22\0"+
    "\33\u0161\3\0\1\u0161\2\0\17\u0161\22\0\32\u0161\1\u0162"+
    "\1\147\2\0\1\u0161\2\0\1\u0162\16\u0161\22\0\32\u0161"+
    "\1\u0163\1\147\2\0\1\u0161\2\0\1\u0163\16\u0161\22\0"+
    "\33\u0164\3\0\1\u0164\2\0\17\u0164\22\0\33\u0165\3\0"+
    "\1\u0165\2\0\17\u0165\22\0\32\u0165\1\u0166\1\147\2\0"+
    "\1\u0165\2\0\1\u0166\16\u0165\22\0\32\u0165\1\u0167\1\147"+
    "\2\0\1\u0165\2\0\1\u0167\16\u0165\22\0\33\u0168\3\0"+
    "\1\u0168\2\0\17\u0168\22\0\33\u0169\3\0\1\u0169\2\0"+
    "\17\u0169\22\0\32\u0169\1\u016a\1\147\2\0\1\u0169\2\0"+
    "\1\u016a\16\u0169\22\0\32\u0169\1\u016b\1\147\2\0\1\u0169"+
    "\2\0\1\u016b\16\u0169\22\0\33\u016c\3\0\1\u016c\2\0"+
    "\17\u016c\22\0\33\u016d\3\0\1\u016d\2\0\17\u016d\22\0"+
    "\32\u016d\1\u016e\1\147\2\0\1\u016d\2\0\1\u016e\16\u016d"+
    "\22\0\32\u016d\1\u016f\1\147\2\0\1\u016d\2\0\1\u016f"+
    "\16\u016d\22\0\33\u0170\3\0\1\u0170\2\0\17\u0170\22\0"+
    "\33\u0171\3\0\1\u0171\2\0\17\u0171\22\0\32\u0171\1\u0172"+
    "\1\147\2\0\1\u0171\2\0\1\u0172\16\u0171\22\0\32\u0171"+
    "\1\u0173\1\147\2\0\1\u0171\2\0\1\u0173\16\u0171\22\0"+
    "\33\u0174\3\0\1\u0174\2\0\17\u0174\22\0\33\u0175\3\0"+
    "\1\u0175\2\0\17\u0175\22\0\32\u0175\1\u0176\1\147\2\0"+
    "\1\u0175\2\0\1\u0176\16\u0175\22\0\32\u0175\1\u0177\1\147"+
    "\2\0\1\u0175\2\0\1\u0177\16\u0175\22\0\33\u0178\3\0"+
    "\1\u0178\2\0\17\u0178\22\0\33\u0179\3\0\1\u0179\2\0"+
    "\17\u0179\22\0\32\u0179\1\u017a\1\147\2\0\1\u0179\2\0"+
    "\1\u017a\16\u0179\22\0\32\u0179\1\u017b\1\147\2\0\1\u0179"+
    "\2\0\1\u017b\16\u0179\22\0\33\u017c\3\0\1\u017c\2\0"+
    "\17\u017c\22\0\33\u017d\3\0\1\u017d\2\0\17\u017d\22\0"+
    "\32\u017d\1\u017e\1\147\2\0\1\u017d\2\0\1\u017e\16\u017d"+
    "\22\0\32\u017d\1\u017f\1\147\2\0\1\u017d\2\0\1\u017f"+
    "\16\u017d\22\0\33\u0180\3\0\1\u0180\2\0\17\u0180\22\0"+
    "\33\u0181\3\0\1\u0181\2\0\17\u0181\22\0\32\u0181\1\u0182"+
    "\1\147\2\0\1\u0181\2\0\1\u0182\16\u0181\22\0\32\u0181"+
    "\1\u0183\1\147\2\0\1\u0181\2\0\1\u0183\16\u0181\22\0"+
    "\33\u0184\3\0\1\u0184\2\0\17\u0184\22\0\33\u0185\3\0"+
    "\1\u0185\2\0\17\u0185\22\0\32\u0185\1\u0186\1\147\2\0"+
    "\1\u0185\2\0\1\u0186\16\u0185\22\0\32\u0185\1\u0187\1\147"+
    "\2\0\1\u0185\2\0\1\u0187\16\u0185\22\0\33\u0188\3\0"+
    "\1\u0188\2\0\17\u0188\22\0\33\u0189\3\0\1\u0189\2\0"+
    "\17\u0189\22\0\32\u0189\1\u018a\1\147\2\0\1\u0189\2\0"+
    "\1\u018a\16\u0189\22\0\32\u0189\1\u018b\1\147\2\0\1\u0189"+
    "\2\0\1\u018b\16\u0189\22\0\33\u018c\3\0\1\u018c\2\0"+
    "\17\u018c\22\0\33\u018d\3\0\1\u018d\2\0\17\u018d\22\0"+
    "\32\u018d\1\u018e\1\147\2\0\1\u018d\2\0\1\u018e\16\u018d"+
    "\22\0\32\u018d\1\u018f\1\147\2\0\1\u018d\2\0\1\u018f"+
    "\16\u018d\22\0\33\u0190\3\0\1\u0190\2\0\17\u0190\22\0"+
    "\33\u0191\3\0\1\u0191\2\0\17\u0191\22\0\32\u0191\1\u0192"+
    "\1\147\2\0\1\u0191\2\0\1\u0192\16\u0191\22\0\32\u0191"+
    "\1\u0193\1\147\2\0\1\u0191\2\0\1\u0193\16\u0191\22\0"+
    "\33\u0194\3\0\1\u0194\2\0\17\u0194\22\0\33\u0195\3\0"+
    "\1\u0195\2\0\17\u0195\22\0\32\u0195\1\u0196\1\147\2\0"+
    "\1\u0195\2\0\1\u0196\16\u0195\22\0\32\u0195\1\u0197\1\147"+
    "\2\0\1\u0195\2\0\1\u0197\16\u0195\22\0\33\u0198\3\0"+
    "\1\u0198\2\0\17\u0198\22\0\33\u0199\3\0\1\u0199\2\0"+
    "\17\u0199\22\0\32\u0199\1\u019a\1\147\2\0\1\u0199\2\0"+
    "\1\u019a\16\u0199\22\0\32\u0199\1\u019b\1\147\2\0\1\u0199"+
    "\2\0\1\u019b\16\u0199\22\0\33\u019c\3\0\1\u019c\2\0"+
    "\17\u019c\22\0\33\u019d\3\0\1\u019d\2\0\17\u019d\22\0"+
    "\32\u019d\1\u019e\1\147\2\0\1\u019d\2\0\1\u019e\16\u019d"+
    "\22\0\32\u019d\1\u019f\1\147\2\0\1\u019d\2\0\1\u019f"+
    "\16\u019d\22\0\33\u01a0\3\0\1\u01a0\2\0\17\u01a0\22\0"+
    "\33\u01a1\3\0\1\u01a1\2\0\17\u01a1\22\0\32\u01a1\1\u01a2"+
    "\1\147\2\0\1\u01a1\2\0\1\u01a2\16\u01a1\22\0\32\u01a1"+
    "\1\u01a3\1\147\2\0\1\u01a1\2\0\1\u01a3\16\u01a1\22\0"+
    "\33\u01a4\3\0\1\u01a4\2\0\17\u01a4\22\0\33\u01a5\3\0"+
    "\1\u01a5\2\0\17\u01a5\22\0\32\u01a5\1\u01a6\1\147\2\0"+
    "\1\u01a5\2\0\1\u01a6\16\u01a5\22\0\32\u01a5\1\u01a7\1\147"+
    "\2\0\1\u01a5\2\0\1\u01a7\16\u01a5\22\0\33\u01a8\3\0"+
    "\1\u01a8\2\0\17\u01a8\22\0\33\u01a9\3\0\1\u01a9\2\0"+
    "\17\u01a9\22\0\32\u01a9\1\u01aa\1\147\2\0\1\u01a9\2\0"+
    "\1\u01aa\16\u01a9\22\0\32\u01a9\1\u01ab\1\147\2\0\1\u01a9"+
    "\2\0\1\u01ab\16\u01a9\22\0\33\u01ac\3\0\1\u01ac\2\0"+
    "\17\u01ac\22\0\33\u01ad\3\0\1\u01ad\2\0\17\u01ad\22\0"+
    "\32\u01ad\1\u01ae\1\147\2\0\1\u01ad\2\0\1\u01ae\16\u01ad"+
    "\22\0\32\u01ad\1\u01af\1\147\2\0\1\u01ad\2\0\1\u01af"+
    "\16\u01ad\22\0\33\u01b0\3\0\1\u01b0\2\0\17\u01b0\22\0"+
    "\33\u01b1\3\0\1\u01b1\2\0\17\u01b1\22\0\32\u01b1\1\u01b2"+
    "\1\147\2\0\1\u01b1\2\0\1\u01b2\16\u01b1\22\0\32\u01b1"+
    "\1\u01b3\1\147\2\0\1\u01b1\2\0\1\u01b3\16\u01b1\22\0"+
    "\33\u01b4\3\0\1\u01b4\2\0\17\u01b4\22\0\33\u01b5\3\0"+
    "\1\u01b5\2\0\17\u01b5\22\0\32\u01b5\1\u01b6\1\147\2\0"+
    "\1\u01b5\2\0\1\u01b6\16\u01b5\22\0\32\u01b5\1\u01b7\1\147"+
    "\2\0\1\u01b5\2\0\1\u01b7\16\u01b5\22\0\33\u01b8\3\0"+
    "\1\u01b8\2\0\17\u01b8\22\0\33\u01b9\3\0\1\u01b9\2\0"+
    "\17\u01b9\22\0\32\u01b9\1\u01ba\1\147\2\0\1\u01b9\2\0"+
    "\1\u01ba\16\u01b9\22\0\32\u01b9\1\u01bb\1\147\2\0\1\u01b9"+
    "\2\0\1\u01bb\16\u01b9\22\0\33\u01bc\3\0\1\u01bc\2\0"+
    "\17\u01bc\22\0\33\u01bd\3\0\1\u01bd\2\0\17\u01bd\22\0"+
    "\32\u01bd\1\u01be\1\147\2\0\1\u01bd\2\0\1\u01be\16\u01bd"+
    "\22\0\32\u01bd\1\u01bf\1\147\2\0\1\u01bd\2\0\1\u01bf"+
    "\16\u01bd\22\0\33\u01c0\3\0\1\u01c0\2\0\17\u01c0\22\0"+
    "\33\u01c1\3\0\1\u01c1\2\0\17\u01c1\22\0\32\u01c1\1\u01c2"+
    "\1\147\2\0\1\u01c1\2\0\1\u01c2\16\u01c1\22\0\32\u01c1"+
    "\1\u01c3\1\147\2\0\1\u01c1\2\0\1\u01c3\16\u01c1\22\0"+
    "\33\u01c4\3\0\1\u01c4\2\0\17\u01c4\22\0\33\u01c5\3\0"+
    "\1\u01c5\2\0\17\u01c5\22\0\32\u01c5\1\u01c6\1\147\2\0"+
    "\1\u01c5\2\0\1\u01c6\16\u01c5\22\0\32\u01c5\1\u01c7\1\147"+
    "\2\0\1\u01c5\2\0\1\u01c7\16\u01c5\22\0\33\u01c8\3\0"+
    "\1\u01c8\2\0\17\u01c8\22\0\33\u01c9\3\0\1\u01c9\2\0"+
    "\17\u01c9\22\0\32\u01c9\1\u01ca\1\147\2\0\1\u01c9\2\0"+
    "\1\u01ca\16\u01c9\22\0\32\u01c9\1\u01cb\1\147\2\0\1\u01c9"+
    "\2\0\1\u01cb\16\u01c9\22\0\33\u01cc\3\0\1\u01cc\2\0"+
    "\17\u01cc\22\0\33\u01cd\3\0\1\u01cd\2\0\17\u01cd\22\0"+
    "\32\u01cd\1\u01ce\1\147\2\0\1\u01cd\2\0\1\u01ce\16\u01cd"+
    "\22\0\32\u01cd\1\u01cf\1\147\2\0\1\u01cd\2\0\1\u01cf"+
    "\16\u01cd\22\0\33\u01d0\3\0\1\u01d0\2\0\17\u01d0\22\0"+
    "\33\u01d1\3\0\1\u01d1\2\0\17\u01d1\22\0\32\u01d1\1\u01d2"+
    "\1\147\2\0\1\u01d1\2\0\1\u01d2\16\u01d1\22\0\32\u01d1"+
    "\1\u01d3\1\147\2\0\1\u01d1\2\0\1\u01d3\16\u01d1\22\0"+
    "\33\u01d4\3\0\1\u01d4\2\0\17\u01d4\22\0\33\u01d5\3\0"+
    "\1\u01d5\2\0\17\u01d5\22\0\32\u01d5\1\u01d6\1\147\2\0"+
    "\1\u01d5\2\0\1\u01d6\16\u01d5\22\0\32\u01d5\1\u01d7\1\147"+
    "\2\0\1\u01d5\2\0\1\u01d7\16\u01d5\22\0\33\u01d8\3\0"+
    "\1\u01d8\2\0\17\u01d8\22\0\33\u01d9\3\0\1\u01d9\2\0"+
    "\17\u01d9\22\0\32\u01d9\1\u01da\1\147\2\0\1\u01d9\2\0"+
    "\1\u01da\16\u01d9\22\0\32\u01d9\1\u01db\1\147\2\0\1\u01d9"+
    "\2\0\1\u01db\16\u01d9\22\0\33\u01dc\3\0\1\u01dc\2\0"+
    "\17\u01dc\22\0\33\u01dd\3\0\1\u01dd\2\0\17\u01dd\22\0"+
    "\32\u01dd\1\u01de\1\147\2\0\1\u01dd\2\0\1\u01de\16\u01dd"+
    "\22\0\32\u01dd\1\u01df\1\147\2\0\1\u01dd\2\0\1\u01df"+
    "\16\u01dd\22\0\33\u01e0\3\0\1\u01e0\2\0\17\u01e0\22\0"+
    "\33\u01e1\3\0\1\u01e1\2\0\17\u01e1\22\0\32\u01e1\1\u01e2"+
    "\1\147\2\0\1\u01e1\2\0\1\u01e2\16\u01e1\22\0\32\u01e1"+
    "\1\u01e3\1\147\2\0\1\u01e1\2\0\1\u01e3\16\u01e1\22\0"+
    "\33\u01e4\3\0\1\u01e4\2\0\17\u01e4\22\0\33\u01e5\3\0"+
    "\1\u01e5\2\0\17\u01e5\22\0\32\u01e5\1\u01e6\1\147\2\0"+
    "\1\u01e5\2\0\1\u01e6\16\u01e5\22\0\32\u01e5\1\u01e7\1\147"+
    "\2\0\1\u01e5\2\0\1\u01e7\16\u01e5\22\0\33\u01e8\3\0"+
    "\1\u01e8\2\0\17\u01e8\22\0\33\u01e9\3\0\1\u01e9\2\0"+
    "\17\u01e9\22\0\32\u01e9\1\u01ea\1\147\2\0\1\u01e9\2\0"+
    "\1\u01ea\16\u01e9\22\0\32\u01e9\1\u01eb\1\147\2\0\1\u01e9"+
    "\2\0\1\u01eb\16\u01e9\22\0\33\u01ec\3\0\1\u01ec\2\0"+
    "\17\u01ec\22\0\33\u01ed\3\0\1\u01ed\2\0\17\u01ed\22\0"+
    "\32\u01ed\1\u01ee\1\147\2\0\1\u01ed\2\0\1\u01ee\16\u01ed"+
    "\22\0\32\u01ed\1\u01ef\1\147\2\0\1\u01ed\2\0\1\u01ef"+
    "\16\u01ed\22\0\33\u01f0\3\0\1\u01f0\2\0\17\u01f0\22\0"+
    "\33\u01f1\3\0\1\u01f1\2\0\17\u01f1\22\0\32\u01f1\1\u01f2"+
    "\1\147\2\0\1\u01f1\2\0\1\u01f2\16\u01f1\22\0\32\u01f1"+
    "\1\u01f3\1\147\2\0\1\u01f1\2\0\1\u01f3\16\u01f1\22\0"+
    "\33\u01f4\3\0\1\u01f4\2\0\17\u01f4\22\0\33\u01f5\3\0"+
    "\1\u01f5\2\0\17\u01f5\22\0\32\u01f5\1\u01f6\1\147\2\0"+
    "\1\u01f5\2\0\1\u01f6\16\u01f5\22\0\32\u01f5\1\u01f7\1\147"+
    "\2\0\1\u01f5\2\0\1\u01f7\16\u01f5\22\0\33\u01f8\3\0"+
    "\1\u01f8\2\0\17\u01f8\22\0\33\u01f9\3\0\1\u01f9\2\0"+
    "\17\u01f9\22\0\32\u01f9\1\u01fa\1\147\2\0\1\u01f9\2\0"+
    "\1\u01fa\16\u01f9\22\0\32\u01f9\1\u01fb\1\147\2\0\1\u01f9"+
    "\2\0\1\u01fb\16\u01f9\22\0\33\u01fc\3\0\1\u01fc\2\0"+
    "\17\u01fc\22\0\33\u01fd\3\0\1\u01fd\2\0\17\u01fd\22\0"+
    "\32\u01fd\1\u01fe\1\147\2\0\1\u01fd\2\0\1\u01fe\16\u01fd"+
    "\22\0\32\u01fd\1\u01ff\1\147\2\0\1\u01fd\2\0\1\u01ff"+
    "\16\u01fd\22\0\33\u0200\3\0\1\u0200\2\0\17\u0200\22\0"+
    "\33\u0201\3\0\1\u0201\2\0\17\u0201\22\0\32\u0201\1\u0202"+
    "\1\147\2\0\1\u0201\2\0\1\u0202\16\u0201\22\0\32\u0201"+
    "\1\u0203\1\147\2\0\1\u0201\2\0\1\u0203\16\u0201\22\0"+
    "\33\u0204\3\0\1\u0204\2\0\17\u0204\22\0\33\u0205\3\0"+
    "\1\u0205\2\0\17\u0205\22\0\32\u0205\1\u0206\1\147\2\0"+
    "\1\u0205\2\0\1\u0206\16\u0205\22\0\32\u0205\1\u0207\1\147"+
    "\2\0\1\u0205\2\0\1\u0207\16\u0205\22\0\33\u0208\3\0"+
    "\1\u0208\2\0\17\u0208\22\0\33\u0209\3\0\1\u0209\2\0"+
    "\17\u0209\22\0\32\u0209\1\u020a\1\147\2\0\1\u0209\2\0"+
    "\1\u020a\16\u0209\22\0\32\u0209\1\u020b\1\147\2\0\1\u0209"+
    "\2\0\1\u020b\16\u0209\22\0\33\u020c\3\0\1\u020c\2\0"+
    "\17\u020c\22\0\33\u020d\3\0\1\u020d\2\0\17\u020d\22\0"+
    "\32\u020d\1\u020e\1\147\2\0\1\u020d\2\0\1\u020e\16\u020d"+
    "\22\0\32\u020d\1\u020f\1\147\2\0\1\u020d\2\0\1\u020f"+
    "\16\u020d\22\0\33\u0210\3\0\1\u0210\2\0\17\u0210\22\0"+
    "\33\u0211\3\0\1\u0211\2\0\17\u0211\22\0\32\u0211\1\u0212"+
    "\1\147\2\0\1\u0211\2\0\1\u0212\16\u0211\22\0\32\u0211"+
    "\1\u0213\1\147\2\0\1\u0211\2\0\1\u0213\16\u0211\22\0"+
    "\33\u0214\3\0\1\u0214\2\0\17\u0214\22\0\33\u0215\3\0"+
    "\1\u0215\2\0\17\u0215\22\0\32\u0215\1\u0216\1\147\2\0"+
    "\1\u0215\2\0\1\u0216\16\u0215\22\0\32\u0215\1\u0217\1\147"+
    "\2\0\1\u0215\2\0\1\u0217\16\u0215\22\0\33\u0218\3\0"+
    "\1\u0218\2\0\17\u0218\22\0\33\u0219\3\0\1\u0219\2\0"+
    "\17\u0219\22\0\32\u0219\1\u021a\1\147\2\0\1\u0219\2\0"+
    "\1\u021a\16\u0219\22\0\32\u0219\1\u021b\1\147\2\0\1\u0219"+
    "\2\0\1\u021b\16\u0219\22\0\33\u021c\3\0\1\u021c\2\0"+
    "\17\u021c\22\0\33\u021d\3\0\1\u021d\2\0\17\u021d\22\0"+
    "\32\u021d\1\u021e\1\147\2\0\1\u021d\2\0\1\u021e\16\u021d"+
    "\22\0\32\u021d\1\u021f\1\147\2\0\1\u021d\2\0\1\u021f"+
    "\16\u021d\22\0\33\u0220\3\0\1\u0220\2\0\17\u0220\22\0"+
    "\33\u0221\3\0\1\u0221\2\0\17\u0221\22\0\32\u0221\1\u0222"+
    "\1\147\2\0\1\u0221\2\0\1\u0222\16\u0221\22\0\32\u0221"+
    "\1\u0223\1\147\2\0\1\u0221\2\0\1\u0223\16\u0221\22\0"+
    "\33\u0224\3\0\1\u0224\2\0\17\u0224\22\0\33\u0225\3\0"+
    "\1\u0225\2\0\17\u0225\22\0\32\u0225\1\u0226\1\147\2\0"+
    "\1\u0225\2\0\1\u0226\16\u0225\22\0\32\u0225\1\u0227\1\147"+
    "\2\0\1\u0225\2\0\1\u0227\16\u0225\22\0\33\u0228\3\0"+
    "\1\u0228\2\0\17\u0228\22\0\33\u0229\3\0\1\u0229\2\0"+
    "\17\u0229\22\0\32\u0229\1\u022a\1\147\2\0\1\u0229\2\0"+
    "\1\u022a\16\u0229\22\0\32\u0229\1\u022b\1\147\2\0\1\u0229"+
    "\2\0\1\u022b\16\u0229\22\0\33\u022c\3\0\1\u022c\2\0"+
    "\17\u022c\22\0\33\u022d\3\0\1\u022d\2\0\17\u022d\22\0"+
    "\32\u022d\1\u022e\1\147\2\0\1\u022d\2\0\1\u022e\16\u022d"+
    "\22\0\32\u022d\1\u022f\1\147\2\0\1\u022d\2\0\1\u022f"+
    "\16\u022d\22\0\33\u0230\3\0\1\u0230\2\0\17\u0230\22\0"+
    "\33\u0231\3\0\1\u0231\2\0\17\u0231\22\0\32\u0231\1\u0232"+
    "\1\147\2\0\1\u0231\2\0\1\u0232\16\u0231\22\0\32\u0231"+
    "\1\u0233\1\147\2\0\1\u0231\2\0\1\u0233\16\u0231\22\0"+
    "\33\u0234\3\0\1\u0234\2\0\17\u0234\22\0\33\u0235\3\0"+
    "\1\u0235\2\0\17\u0235\22\0\32\u0235\1\u0236\1\147\2\0"+
    "\1\u0235\2\0\1\u0236\16\u0235\22\0\32\u0235\1\u0237\1\147"+
    "\2\0\1\u0235\2\0\1\u0237\16\u0235\22\0\33\u0238\3\0"+
    "\1\u0238\2\0\17\u0238\22\0\33\u0239\3\0\1\u0239\2\0"+
    "\17\u0239\22\0\32\u0239\1\u023a\1\147\2\0\1\u0239\2\0"+
    "\1\u023a\16\u0239\22\0\32\u0239\1\u023b\1\147\2\0\1\u0239"+
    "\2\0\1\u023b\16\u0239\22\0\33\u023c\3\0\1\u023c\2\0"+
    "\17\u023c\22\0\33\u023d\3\0\1\u023d\2\0\17\u023d\22\0"+
    "\32\u023d\1\u023e\1\147\2\0\1\u023d\2\0\1\u023e\16\u023d"+
    "\22\0\32\u023d\1\u023f\1\147\2\0\1\u023d\2\0\1\u023f"+
    "\16\u023d\22\0\33\u0240\3\0\1\u0240\2\0\17\u0240\22\0"+
    "\33\u0241\3\0\1\u0241\2\0\17\u0241\22\0\32\u0241\1\u0242"+
    "\1\147\2\0\1\u0241\2\0\1\u0242\16\u0241\22\0\32\u0241"+
    "\1\u0243\1\147\2\0\1\u0241\2\0\1\u0243\16\u0241\22\0"+
    "\33\u0244\3\0\1\u0244\2\0\17\u0244\22\0\33\u0245\3\0"+
    "\1\u0245\2\0\17\u0245\22\0\32\u0245\1\u0246\1\147\2\0"+
    "\1\u0245\2\0\1\u0246\16\u0245\22\0\32\u0245\1\u0247\1\147"+
    "\2\0\1\u0245\2\0\1\u0247\16\u0245\22\0\33\u0248\3\0"+
    "\1\u0248\2\0\17\u0248\22\0\33\u0249\3\0\1\u0249\2\0"+
    "\17\u0249\22\0\32\u0249\1\u024a\1\147\2\0\1\u0249\2\0"+
    "\1\u024a\16\u0249\22\0\32\u0249\1\u024b\1\147\2\0\1\u0249"+
    "\2\0\1\u024b\16\u0249\22\0\33\u024c\3\0\1\u024c\2\0"+
    "\17\u024c\22\0\33\u024d\3\0\1\u024d\2\0\17\u024d\22\0"+
    "\32\u024d\1\u024e\1\147\2\0\1\u024d\2\0\1\u024e\16\u024d"+
    "\22\0\32\u024d\1\u024f\1\147\2\0\1\u024d\2\0\1\u024f"+
    "\16\u024d\22\0\33\u0250\3\0\1\u0250\2\0\17\u0250\22\0"+
    "\33\u0251\3\0\1\u0251\2\0\17\u0251\22\0\32\u0251\1\u0252"+
    "\1\147\2\0\1\u0251\2\0\1\u0252\16\u0251\22\0\32\u0251"+
    "\1\u0253\1\147\2\0\1\u0251\2\0\1\u0253\16\u0251\22\0"+
    "\33\u0254\3\0\1\u0254\2\0\17\u0254\22\0\33\u0255\3\0"+
    "\1\u0255\2\0\17\u0255\22\0\32\u0255\1\u0256\1\147\2\0"+
    "\1\u0255\2\0\1\u0256\16\u0255\22\0\32\u0255\1\u0257\1\147"+
    "\2\0\1\u0255\2\0\1\u0257\16\u0255\22\0\33\u0258\3\0"+
    "\1\u0258\2\0\17\u0258\22\0\33\u0259\3\0\1\u0259\2\0"+
    "\17\u0259\22\0\32\u0259\1\u025a\1\147\2\0\1\u0259\2\0"+
    "\1\u025a\16\u0259\22\0\32\u0259\1\u025b\1\147\2\0\1\u0259"+
    "\2\0\1\u025b\16\u0259\22\0\33\u025c\3\0\1\u025c\2\0"+
    "\17\u025c\22\0\33\u025d\3\0\1\u025d\2\0\17\u025d\22\0"+
    "\32\u025d\1\u025e\1\147\2\0\1\u025d\2\0\1\u025e\16\u025d"+
    "\22\0\32\u025d\1\u025f\1\147\2\0\1\u025d\2\0\1\u025f"+
    "\16\u025d\22\0\33\u0260\3\0\1\u0260\2\0\17\u0260\22\0"+
    "\33\u0261\3\0\1\u0261\2\0\17\u0261\22\0\32\u0261\1\u0262"+
    "\1\147\2\0\1\u0261\2\0\1\u0262\16\u0261\22\0\32\u0261"+
    "\1\u0263\1\147\2\0\1\u0261\2\0\1\u0263\16\u0261\22\0"+
    "\33\u0264\3\0\1\u0264\2\0\17\u0264\22\0\33\u0265\3\0"+
    "\1\u0265\2\0\17\u0265\22\0\32\u0265\1\u0266\1\147\2\0"+
    "\1\u0265\2\0\1\u0266\16\u0265\22\0\32\u0265\1\u0267\1\147"+
    "\2\0\1\u0265\2\0\1\u0267\16\u0265\22\0\33\u0268\3\0"+
    "\1\u0268\2\0\17\u0268\22\0\33\u0269\3\0\1\u0269\2\0"+
    "\17\u0269\22\0\32\u0269\1\u026a\1\147\2\0\1\u0269\2\0"+
    "\1\u026a\16\u0269\22\0\32\u0269\1\u026b\1\147\2\0\1\u0269"+
    "\2\0\1\u026b\16\u0269\22\0\33\u026c\3\0\1\u026c\2\0"+
    "\17\u026c\22\0\33\u026d\3\0\1\u026d\2\0\17\u026d\22\0"+
    "\32\u026d\1\u026e\1\147\2\0\1\u026d\2\0\1\u026e\16\u026d"+
    "\22\0\32\u026d\1\u026f\1\147\2\0\1\u026d\2\0\1\u026f"+
    "\16\u026d\22\0\33\u0270\3\0\1\u0270\2\0\17\u0270\22\0"+
    "\33\u0271\3\0\1\u0271\2\0\17\u0271\22\0\32\u0271\1\u0272"+
    "\1\147\2\0\1\u0271\2\0\1\u0272\16\u0271\22\0\32\u0271"+
    "\1\u0273\1\147\2\0\1\u0271\2\0\1\u0273\16\u0271\22\0"+
    "\33\u0274\3\0\1\u0274\2\0\17\u0274\22\0\33\u0275\3\0"+
    "\1\u0275\2\0\17\u0275\22\0\32\u0275\1\u0276\1\147\2\0"+
    "\1\u0275\2\0\1\u0276\16\u0275\22\0\32\u0275\1\u0277\1\147"+
    "\2\0\1\u0275\2\0\1\u0277\16\u0275\22\0\33\u0278\3\0"+
    "\1\u0278\2\0\17\u0278\22\0\33\u0279\3\0\1\u0279\2\0"+
    "\17\u0279\22\0\32\u0279\1\u027a\1\147\2\0\1\u0279\2\0"+
    "\1\u027a\16\u0279\22\0\32\u0279\1\u027b\1\147\2\0\1\u0279"+
    "\2\0\1\u027b\16\u0279\22\0\33\u027c\3\0\1\u027c\2\0"+
    "\17\u027c\22\0\33\u027d\3\0\1\u027d\2\0\17\u027d\22\0"+
    "\32\u027d\1\u027e\1\147\2\0\1\u027d\2\0\1\u027e\16\u027d"+
    "\22\0\32\u027d\1\u027f\1\147\2\0\1\u027d\2\0\1\u027f"+
    "\16\u027d\22\0\33\u0280\3\0\1\u0280\2\0\17\u0280\22\0"+
    "\33\u0281\3\0\1\u0281\2\0\17\u0281\22\0\32\u0281\1\u0282"+
    "\1\147\2\0\1\u0281\2\0\1\u0282\16\u0281\22\0\32\u0281"+
    "\1\u0283\1\147\2\0\1\u0281\2\0\1\u0283\16\u0281\22\0"+
    "\33\u0284\3\0\1\u0284\2\0\17\u0284\22\0\33\u0285\3\0"+
    "\1\u0285\2\0\17\u0285\22\0\32\u0285\1\u0286\1\147\2\0"+
    "\1\u0285\2\0\1\u0286\16\u0285\22\0\32\u0285\1\u0287\1\147"+
    "\2\0\1\u0285\2\0\1\u0287\16\u0285\22\0\33\u0288\3\0"+
    "\1\u0288\2\0\17\u0288\22\0\33\u0289\3\0\1\u0289\2\0"+
    "\17\u0289\22\0\32\u0289\1\u028a\1\147\2\0\1\u0289\2\0"+
    "\1\u028a\16\u0289\22\0\32\u0289\1\u028b\1\147\2\0\1\u0289"+
    "\2\0\1\u028b\16\u0289\22\0\33\u028c\3\0\1\u028c\2\0"+
    "\17\u028c\22\0\33\u028d\3\0\1\u028d\2\0\17\u028d\22\0"+
    "\32\u028d\1\u028e\1\147\2\0\1\u028d\2\0\1\u028e\16\u028d"+
    "\22\0\32\u028d\1\u028f\1\147\2\0\1\u028d\2\0\1\u028f"+
    "\16\u028d\22\0\33\u0290\3\0\1\u0290\2\0\17\u0290\22\0"+
    "\33\u0291\3\0\1\u0291\2\0\17\u0291\22\0\32\u0291\1\u0292"+
    "\1\147\2\0\1\u0291\2\0\1\u0292\16\u0291\22\0\32\u0291"+
    "\1\u0293\1\147\2\0\1\u0291\2\0\1\u0293\16\u0291\22\0"+
    "\33\u0294\3\0\1\u0294\2\0\17\u0294\22\0\33\u0295\3\0"+
    "\1\u0295\2\0\17\u0295\22\0\32\u0295\1\u0296\1\147\2\0"+
    "\1\u0295\2\0\1\u0296\16\u0295\22\0\32\u0295\1\u0297\1\147"+
    "\2\0\1\u0295\2\0\1\u0297\16\u0295\22\0\33\u0298\3\0"+
    "\1\u0298\2\0\17\u0298\22\0\33\u0299\3\0\1\u0299\2\0"+
    "\17\u0299\22\0\32\u0299\1\u029a\1\147\2\0\1\u0299\2\0"+
    "\1\u029a\16\u0299\22\0\32\u0299\1\u029b\1\147\2\0\1\u0299"+
    "\2\0\1\u029b\16\u0299\22\0\33\u029c\3\0\1\u029c\2\0"+
    "\17\u029c\22\0\33\u029d\3\0\1\u029d\2\0\17\u029d\22\0"+
    "\32\u029d\1\u029e\1\147\2\0\1\u029d\2\0\1\u029e\16\u029d"+
    "\22\0\32\u029d\1\u029f\1\147\2\0\1\u029d\2\0\1\u029f"+
    "\16\u029d\22\0\33\u02a0\3\0\1\u02a0\2\0\17\u02a0\22\0"+
    "\33\u02a1\3\0\1\u02a1\2\0\17\u02a1\22\0\32\u02a1\1\u02a2"+
    "\1\147\2\0\1\u02a1\2\0\1\u02a2\16\u02a1\22\0\32\u02a1"+
    "\1\u02a3\1\147\2\0\1\u02a1\2\0\1\u02a3\16\u02a1\22\0"+
    "\33\u02a4\3\0\1\u02a4\2\0\17\u02a4\22\0\33\u02a5\3\0"+
    "\1\u02a5\2\0\17\u02a5\22\0\32\u02a5\1\u02a6\1\147\2\0"+
    "\1\u02a5\2\0\1\u02a6\16\u02a5\22\0\32\u02a5\1\u02a7\1\147"+
    "\2\0\1\u02a5\2\0\1\u02a7\16\u02a5\22\0\33\u02a8\3\0"+
    "\1\u02a8\2\0\17\u02a8\22\0\33\u02a9\3\0\1\u02a9\2\0"+
    "\17\u02a9\22\0\32\u02a9\1\u02aa\1\147\2\0\1\u02a9\2\0"+
    "\1\u02aa\16\u02a9\22\0\32\u02a9\1\u02ab\1\147\2\0\1\u02a9"+
    "\2\0\1\u02ab\16\u02a9\22\0\33\u02ac\3\0\1\u02ac\2\0"+
    "\17\u02ac\22\0\33\u02ad\3\0\1\u02ad\2\0\17\u02ad\22\0"+
    "\32\u02ad\1\u02ae\1\147\2\0\1\u02ad\2\0\1\u02ae\16\u02ad"+
    "\22\0\32\u02ad\1\u02af\1\147\2\0\1\u02ad\2\0\1\u02af"+
    "\16\u02ad\22\0\33\u02b0\3\0\1\u02b0\2\0\17\u02b0\22\0"+
    "\33\u02b1\3\0\1\u02b1\2\0\17\u02b1\22\0\32\u02b1\1\u02b2"+
    "\1\147\2\0\1\u02b1\2\0\1\u02b2\16\u02b1\22\0\32\u02b1"+
    "\1\u02b3\1\147\2\0\1\u02b1\2\0\1\u02b3\16\u02b1\22\0"+
    "\33\u02b4\3\0\1\u02b4\2\0\17\u02b4\22\0\33\u02b5\3\0"+
    "\1\u02b5\2\0\17\u02b5\22\0\32\u02b5\1\u02b6\1\147\2\0"+
    "\1\u02b5\2\0\1\u02b6\16\u02b5\22\0\32\u02b5\1\u02b7\1\147"+
    "\2\0\1\u02b5\2\0\1\u02b7\16\u02b5\22\0\33\u02b8\3\0"+
    "\1\u02b8\2\0\17\u02b8\22\0\33\u02b9\3\0\1\u02b9\2\0"+
    "\17\u02b9\22\0\32\u02b9\1\u02ba\1\147\2\0\1\u02b9\2\0"+
    "\1\u02ba\16\u02b9\22\0\32\u02b9\1\u02bb\1\147\2\0\1\u02b9"+
    "\2\0\1\u02bb\16\u02b9\22\0\33\u02bc\3\0\1\u02bc\2\0"+
    "\17\u02bc\22\0\33\u02bd\3\0\1\u02bd\2\0\17\u02bd\22\0"+
    "\32\u02bd\1\u02be\1\147\2\0\1\u02bd\2\0\1\u02be\16\u02bd"+
    "\22\0\32\u02bd\1\u02bf\1\147\2\0\1\u02bd\2\0\1\u02bf"+
    "\16\u02bd\22\0\33\u02c0\3\0\1\u02c0\2\0\17\u02c0\22\0"+
    "\33\u02c1\3\0\1\u02c1\2\0\17\u02c1\22\0\32\u02c1\1\u02c2"+
    "\1\147\2\0\1\u02c1\2\0\1\u02c2\16\u02c1\22\0\32\u02c1"+
    "\1\u02c3\1\147\2\0\1\u02c1\2\0\1\u02c3\16\u02c1\22\0"+
    "\33\u02c4\3\0\1\u02c4\2\0\17\u02c4\22\0\33\u02c5\3\0"+
    "\1\u02c5\2\0\17\u02c5\22\0\32\u02c5\1\u02c6\1\147\2\0"+
    "\1\u02c5\2\0\1\u02c6\16\u02c5\22\0\32\u02c5\1\u02c7\1\147"+
    "\2\0\1\u02c5\2\0\1\u02c7\16\u02c5\22\0\33\u02c8\3\0"+
    "\1\u02c8\2\0\17\u02c8\22\0\33\u02c9\3\0\1\u02c9\2\0"+
    "\17\u02c9\22\0\32\u02c9\1\u02ca\1\147\2\0\1\u02c9\2\0"+
    "\1\u02ca\16\u02c9\22\0\32\u02c9\1\u02cb\1\147\2\0\1\u02c9"+
    "\2\0\1\u02cb\16\u02c9\22\0\33\u02cc\3\0\1\u02cc\2\0"+
    "\17\u02cc\22\0\33\u02cd\3\0\1\u02cd\2\0\17\u02cd\22\0"+
    "\32\u02cd\1\u02ce\1\147\2\0\1\u02cd\2\0\1\u02ce\16\u02cd"+
    "\22\0\32\u02cd\1\u02cf\1\147\2\0\1\u02cd\2\0\1\u02cf"+
    "\16\u02cd\22\0\33\u02d0\3\0\1\u02d0\2\0\17\u02d0\22\0"+
    "\33\u02d1\3\0\1\u02d1\2\0\17\u02d1\22\0\32\u02d1\1\u02d2"+
    "\1\147\2\0\1\u02d1\2\0\1\u02d2\16\u02d1\22\0\32\u02d1"+
    "\1\u02d3\1\147\2\0\1\u02d1\2\0\1\u02d3\16\u02d1\22\0"+
    "\33\u02d4\3\0\1\u02d4\2\0\17\u02d4\22\0\33\u02d5\3\0"+
    "\1\u02d5\2\0\17\u02d5\22\0\32\u02d5\1\u02d6\1\147\2\0"+
    "\1\u02d5\2\0\1\u02d6\16\u02d5\22\0\32\u02d5\1\u02d7\1\147"+
    "\2\0\1\u02d5\2\0\1\u02d7\16\u02d5\22\0\33\u02d8\3\0"+
    "\1\u02d8\2\0\17\u02d8\22\0\33\u02d9\3\0\1\u02d9\2\0"+
    "\17\u02d9\22\0\32\u02d9\1\u02da\1\147\2\0\1\u02d9\2\0"+
    "\1\u02da\16\u02d9\22\0\32\u02d9\1\u02db\1\147\2\0\1\u02d9"+
    "\2\0\1\u02db\16\u02d9\22\0\33\u02dc\3\0\1\u02dc\2\0"+
    "\17\u02dc\22\0\33\u02dd\3\0\1\u02dd\2\0\17\u02dd\22\0"+
    "\32\u02dd\1\u02de\1\147\2\0\1\u02dd\2\0\1\u02de\16\u02dd"+
    "\22\0\32\u02dd\1\u02df\1\147\2\0\1\u02dd\2\0\1\u02df"+
    "\16\u02dd\22\0\33\u02e0\3\0\1\u02e0\2\0\17\u02e0\22\0"+
    "\33\u02e1\3\0\1\u02e1\2\0\17\u02e1\22\0\32\u02e1\1\u02e2"+
    "\1\147\2\0\1\u02e1\2\0\1\u02e2\16\u02e1\22\0\32\u02e1"+
    "\1\u02e3\1\147\2\0\1\u02e1\2\0\1\u02e3\16\u02e1\22\0"+
    "\33\u02e4\3\0\1\u02e4\2\0\17\u02e4\22\0\33\u02e5\3\0"+
    "\1\u02e5\2\0\17\u02e5\22\0\32\u02e5\1\u02e6\1\147\2\0"+
    "\1\u02e5\2\0\1\u02e6\16\u02e5\22\0\32\u02e5\1\u02e7\1\147"+
    "\2\0\1\u02e5\2\0\1\u02e7\16\u02e5\22\0\33\u02e8\3\0"+
    "\1\u02e8\2\0\17\u02e8\22\0\33\u02e9\3\0\1\u02e9\2\0"+
    "\17\u02e9\22\0\32\u02e9\1\u02ea\1\147\2\0\1\u02e9\2\0"+
    "\1\u02ea\16\u02e9\22\0\32\u02e9\1\u02eb\1\147\2\0\1\u02e9"+
    "\2\0\1\u02eb\16\u02e9\22\0\33\u02ec\3\0\1\u02ec\2\0"+
    "\17\u02ec\22\0\33\u02ed\3\0\1\u02ed\2\0\17\u02ed\22\0"+
    "\32\u02ed\1\u02ee\1\147\2\0\1\u02ed\2\0\1\u02ee\16\u02ed"+
    "\22\0\32\u02ed\1\u02ef\1\147\2\0\1\u02ed\2\0\1\u02ef"+
    "\16\u02ed\22\0\33\u02f0\3\0\1\u02f0\2\0\17\u02f0\22\0"+
    "\33\u02f1\3\0\1\u02f1\2\0\17\u02f1\22\0\32\u02f1\1\u02f2"+
    "\1\147\2\0\1\u02f1\2\0\1\u02f2\16\u02f1\22\0\32\u02f1"+
    "\1\u02f3\1\147\2\0\1\u02f1\2\0\1\u02f3\16\u02f1\22\0"+
    "\33\u02f4\3\0\1\u02f4\2\0\17\u02f4\22\0\33\u02f5\3\0"+
    "\1\u02f5\2\0\17\u02f5\22\0\32\u02f5\1\u02f6\1\147\2\0"+
    "\1\u02f5\2\0\1\u02f6\16\u02f5\22\0\32\u02f5\1\u02f7\1\147"+
    "\2\0\1\u02f5\2\0\1\u02f7\16\u02f5\22\0\33\u02f8\3\0"+
    "\1\u02f8\2\0\17\u02f8\22\0\33\u02f9\3\0\1\u02f9\2\0"+
    "\17\u02f9\22\0\32\u02f9\1\u02fa\1\147\2\0\1\u02f9\2\0"+
    "\1\u02fa\16\u02f9\22\0\32\u02f9\1\u02fb\1\147\2\0\1\u02f9"+
    "\2\0\1\u02fb\16\u02f9\22\0\33\u02fc\3\0\1\u02fc\2\0"+
    "\17\u02fc\22\0\33\u02fd\3\0\1\u02fd\2\0\17\u02fd\22\0"+
    "\32\u02fd\1\u02fe\1\147\2\0\1\u02fd\2\0\1\u02fe\16\u02fd"+
    "\22\0\32\u02fd\1\u02ff\1\147\2\0\1\u02fd\2\0\1\u02ff"+
    "\16\u02fd\22\0\33\u0300\3\0\1\u0300\2\0\17\u0300\22\0"+
    "\33\2\3\0\1\2\2\0\17\2\22\0\32\2\1\u0301"+
    "\1\147\2\0\1\2\2\0\1\u0301\16\2\22\0\32\2"+
    "\1\u0302\1\147\2\0\1\2\2\0\1\u0302\16\2\22\0"+
    "\33\u0303\3\0\1\u0303\2\0\17\u0303\54\0\1\u0301\1\147"+
    "\5\0\1\u0301\72\0\1\u0304\1\147\5\0\1\u0304\40\0"+
    "\33\u0305\3\0\1\u0305\2\0\17\u0305\22\0\33\u0306\3\0"+
    "\1\u0306\2\0\17\u0306\22\0\33\u0307\3\0\1\u0307\2\0"+
    "\17\u0307\22\0\33\u0308\3\0\1\u0308\2\0\17\u0308\22\0"+
    "\33\u0309\3\0\1\u0309\2\0\17\u0309\22\0\33\u030a\3\0"+
    "\1\u030a\2\0\17\u030a\22\0\33\u030b\3\0\1\u030b\2\0"+
    "\17\u030b\22\0\33\u030c\3\0\1\u030c\2\0\17\u030c\22\0"+
    "\33\u030d\3\0\1\u030d\2\0\17\u030d\22\0\33\u030e\3\0"+
    "\1\u030e\2\0\17\u030e\22\0\33\u030f\3\0\1\u030f\2\0"+
    "\17\u030f\22\0\33\u0310\3\0\1\u0310\2\0\17\u0310\22\0"+
    "\33\u0311\3\0\1\u0311\2\0\17\u0311\22\0\33\u0312\3\0"+
    "\1\u0312\2\0\17\u0312\22\0\33\u0313\3\0\1\u0313\2\0"+
    "\17\u0313\22\0\33\u0314\3\0\1\u0314\2\0\17\u0314\22\0"+
    "\33\u0315\3\0\1\u0315\2\0\17\u0315\22\0\33\u0316\3\0"+
    "\1\u0316\2\0\17\u0316\22\0\33\u0317\3\0\1\u0317\2\0"+
    "\17\u0317\22\0\33\u0318\3\0\1\u0318\2\0\17\u0318\22\0"+
    "\33\u0319\3\0\1\u0319\2\0\17\u0319\22\0\33\u031a\3\0"+
    "\1\u031a\2\0\17\u031a\22\0\33\u031b\3\0\1\u031b\2\0"+
    "\17\u031b\22\0\33\u031c\3\0\1\u031c\2\0\17\u031c\22\0"+
    "\33\u031d\3\0\1\u031d\2\0\17\u031d\22\0\33\u031e\3\0"+
    "\1\u031e\2\0\17\u031e\22\0\33\u031f\3\0\1\u031f\2\0"+
    "\17\u031f\22\0\33\u0320\3\0\1\u0320\2\0\17\u0320\22\0"+
    "\33\u0321\3\0\1\u0321\2\0\17\u0321\22\0\33\u0322\3\0"+
    "\1\u0322\2\0\17\u0322\22\0\33\u0323\3\0\1\u0323\2\0"+
    "\17\u0323\22\0\33\u0324\3\0\1\u0324\2\0\17\u0324\22\0"+
    "\33\u0325\3\0\1\u0325\2\0\17\u0325\22\0\33\u0326\3\0"+
    "\1\u0326\2\0\17\u0326\22\0\33\u0327\3\0\1\u0327\2\0"+
    "\17\u0327\22\0\33\u0328\3\0\1\u0328\2\0\17\u0328\22\0"+
    "\33\u0329\3\0\1\u0329\2\0\17\u0329\22\0\33\u032a\3\0"+
    "\1\u032a\2\0\17\u032a\22\0\33\u032b\3\0\1\u032b\2\0"+
    "\17\u032b\22\0\33\u032c\3\0\1\u032c\2\0\17\u032c\22\0"+
    "\33\u032d\3\0\1\u032d\2\0\17\u032d\22\0\33\u032e\3\0"+
    "\1\u032e\2\0\17\u032e\22\0\33\u032f\3\0\1\u032f\2\0"+
    "\17\u032f\22\0\33\u0330\3\0\1\u0330\2\0\17\u0330\22\0"+
    "\33\u0331\3\0\1\u0331\2\0\17\u0331\22\0\33\u0332\3\0"+
    "\1\u0332\2\0\17\u0332\22\0\33\u0333\3\0\1\u0333\2\0"+
    "\17\u0333\22\0\33\u0334\3\0\1\u0334\2\0\17\u0334\22\0"+
    "\33\u0335\3\0\1\u0335\2\0\17\u0335\22\0\33\u0336\3\0"+
    "\1\u0336\2\0\17\u0336\22\0\33\u0337\3\0\1\u0337\2\0"+
    "\17\u0337\22\0\33\u0338\3\0\1\u0338\2\0\17\u0338\22\0"+
    "\33\u0339\3\0\1\u0339\2\0\17\u0339\22\0\33\u033a\3\0"+
    "\1\u033a\2\0\17\u033a\22\0\33\u033b\3\0\1\u033b\2\0"+
    "\17\u033b\22\0\33\u033c\3\0\1\u033c\2\0\17\u033c\22\0"+
    "\33\u033d\3\0\1\u033d\2\0\17\u033d\22\0\33\u033e\3\0"+
    "\1\u033e\2\0\17\u033e\22\0\33\u033f\3\0\1\u033f\2\0"+
    "\17\u033f\22\0\33\u0340\3\0\1\u0340\2\0\17\u0340\22\0"+
    "\33\u0341\3\0\1\u0341\2\0\17\u0341\22\0\33\u0342\3\0"+
    "\1\u0342\2\0\17\u0342\22\0\33\u0343\3\0\1\u0343\2\0"+
    "\17\u0343\22\0\33\u0344\3\0\1\u0344\2\0\17\u0344\22\0"+
    "\33\u0345\3\0\1\u0345\2\0\17\u0345\22\0\33\u0346\3\0"+
    "\1\u0346\2\0\17\u0346\22\0\33\u0347\3\0\1\u0347\2\0"+
    "\17\u0347\22\0\33\u0348\3\0\1\u0348\2\0\17\u0348\22\0"+
    "\33\u0349\3\0\1\u0349\2\0\17\u0349\22\0\33\u034a\3\0"+
    "\1\u034a\2\0\17\u034a\22\0\33\u034b\3\0\1\u034b\2\0"+
    "\17\u034b\22\0\33\u034c\3\0\1\u034c\2\0\17\u034c\22\0"+
    "\33\u034d\3\0\1\u034d\2\0\17\u034d\22\0\33\u034e\3\0"+
    "\1\u034e\2\0\17\u034e\22\0\33\u034f\3\0\1\u034f\2\0"+
    "\17\u034f\22\0\33\u0350\3\0\1\u0350\2\0\17\u0350\22\0"+
    "\33\u0351\3\0\1\u0351\2\0\17\u0351\22\0\33\u0352\3\0"+
    "\1\u0352\2\0\17\u0352\22\0\33\u0353\3\0\1\u0353\2\0"+
    "\17\u0353\22\0\33\u0354\3\0\1\u0354\2\0\17\u0354\22\0"+
    "\33\u0355\3\0\1\u0355\2\0\17\u0355\22\0\33\u0356\3\0"+
    "\1\u0356\2\0\17\u0356\22\0\33\u0357\3\0\1\u0357\2\0"+
    "\17\u0357\22\0\33\u0358\3\0\1\u0358\2\0\17\u0358\22\0"+
    "\33\u0359\3\0\1\u0359\2\0\17\u0359\22\0\33\u035a\3\0"+
    "\1\u035a\2\0\17\u035a\22\0\33\u035b\3\0\1\u035b\2\0"+
    "\17\u035b\22\0\33\u035c\3\0\1\u035c\2\0\17\u035c\22\0"+
    "\33\u035d\3\0\1\u035d\2\0\17\u035d\22\0\33\u035e\3\0"+
    "\1\u035e\2\0\17\u035e\22\0\33\u035f\3\0\1\u035f\2\0"+
    "\17\u035f\22\0\33\u0360\3\0\1\u0360\2\0\17\u0360\22\0"+
    "\33\u0361\3\0\1\u0361\2\0\17\u0361\22\0\33\u0362\3\0"+
    "\1\u0362\2\0\17\u0362\22\0\33\u0363\3\0\1\u0363\2\0"+
    "\17\u0363\22\0\33\u0364\3\0\1\u0364\2\0\17\u0364\22\0"+
    "\33\u0365\3\0\1\u0365\2\0\17\u0365\22\0\33\u0366\3\0"+
    "\1\u0366\2\0\17\u0366\22\0\33\u0367\3\0\1\u0367\2\0"+
    "\17\u0367\22\0\33\u0368\3\0\1\u0368\2\0\17\u0368\22\0"+
    "\33\u0369\3\0\1\u0369\2\0\17\u0369\22\0\33\u036a\3\0"+
    "\1\u036a\2\0\17\u036a\22\0\33\u036b\3\0\1\u036b\2\0"+
    "\17\u036b\22\0\33\u036c\3\0\1\u036c\2\0\17\u036c\22\0"+
    "\33\u036d\3\0\1\u036d\2\0\17\u036d\22\0\33\u036e\3\0"+
    "\1\u036e\2\0\17\u036e\22\0\33\u036f\3\0\1\u036f\2\0"+
    "\17\u036f\22\0\33\u0370\3\0\1\u0370\2\0\17\u0370\22\0"+
    "\33\u0371\3\0\1\u0371\2\0\17\u0371\22\0\33\u0372\3\0"+
    "\1\u0372\2\0\17\u0372\22\0\33\u0373\3\0\1\u0373\2\0"+
    "\17\u0373\22\0\33\u0374\3\0\1\u0374\2\0\17\u0374\22\0"+
    "\33\u0375\3\0\1\u0375\2\0\17\u0375\22\0\33\u0376\3\0"+
    "\1\u0376\2\0\17\u0376\22\0\33\u0377\3\0\1\u0377\2\0"+
    "\17\u0377\22\0\33\u0378\3\0\1\u0378\2\0\17\u0378\22\0"+
    "\33\u0379\3\0\1\u0379\2\0\17\u0379\22\0\33\u037a\3\0"+
    "\1\u037a\2\0\17\u037a\22\0\33\u037b\3\0\1\u037b\2\0"+
    "\17\u037b\22\0\33\u037c\3\0\1\u037c\2\0\17\u037c\22\0"+
    "\33\u037d\3\0\1\u037d\2\0\17\u037d\22\0\33\u037e\3\0"+
    "\1\u037e\2\0\17\u037e\22\0\33\u037f\3\0\1\u037f\2\0"+
    "\17\u037f\22\0\33\u0380\3\0\1\u0380\2\0\17\u0380\22\0"+
    "\33\u0381\3\0\1\u0381\2\0\17\u0381\22\0\33\u0382\3\0"+
    "\1\u0382\2\0\17\u0382\22\0\33\u0383\3\0\1\u0383\2\0"+
    "\17\u0383\22\0\33\u0384\3\0\1\u0384\2\0\17\u0384\22\0"+
    "\33\u0385\3\0\1\u0385\2\0\17\u0385\22\0\33\u0386\3\0"+
    "\1\u0386\2\0\17\u0386\22\0\33\u0387\3\0\1\u0387\2\0"+
    "\17\u0387\22\0\33\u0388\3\0\1\u0388\2\0\17\u0388\22\0"+
    "\33\u0389\3\0\1\u0389\2\0\17\u0389\22\0\33\u038a\3\0"+
    "\1\u038a\2\0\17\u038a\22\0\33\u038b\3\0\1\u038b\2\0"+
    "\17\u038b\22\0\33\u038c\3\0\1\u038c\2\0\17\u038c\22\0"+
    "\33\u038d\3\0\1\u038d\2\0\17\u038d\22\0\33\u038e\3\0"+
    "\1\u038e\2\0\17\u038e\22\0\33\u038f\3\0\1\u038f\2\0"+
    "\17\u038f\22\0\33\u0390\3\0\1\u0390\2\0\17\u0390\22\0"+
    "\33\u0391\3\0\1\u0391\2\0\17\u0391\22\0\33\u0392\3\0"+
    "\1\u0392\2\0\17\u0392\22\0\33\u0393\3\0\1\u0393\2\0"+
    "\17\u0393\22\0\33\u0394\3\0\1\u0394\2\0\17\u0394\22\0"+
    "\33\u0395\3\0\1\u0395\2\0\17\u0395\22\0\33\u0396\3\0"+
    "\1\u0396\2\0\17\u0396\22\0\33\u0397\3\0\1\u0397\2\0"+
    "\17\u0397\22\0\33\u0398\3\0\1\u0398\2\0\17\u0398\22\0"+
    "\33\u0399\3\0\1\u0399\2\0\17\u0399\22\0\33\u039a\3\0"+
    "\1\u039a\2\0\17\u039a\22\0\33\u039b\3\0\1\u039b\2\0"+
    "\17\u039b\22\0\33\u039c\3\0\1\u039c\2\0\17\u039c\22\0"+
    "\33\u039d\3\0\1\u039d\2\0\17\u039d\22\0\33\u039e\3\0"+
    "\1\u039e\2\0\17\u039e\22\0\33\u039f\3\0\1\u039f\2\0"+
    "\17\u039f\22\0\33\u03a0\3\0\1\u03a0\2\0\17\u03a0\22\0"+
    "\33\u03a1\3\0\1\u03a1\2\0\17\u03a1\22\0\33\u03a2\3\0"+
    "\1\u03a2\2\0\17\u03a2\22\0\33\u03a3\3\0\1\u03a3\2\0"+
    "\17\u03a3\22\0\33\u03a4\3\0\1\u03a4\2\0\17\u03a4\22\0"+
    "\33\u03a5\3\0\1\u03a5\2\0\17\u03a5\22\0\33\u03a6\3\0"+
    "\1\u03a6\2\0\17\u03a6\22\0\33\u03a7\3\0\1\u03a7\2\0"+
    "\17\u03a7\22\0\33\u03a8\3\0\1\u03a8\2\0\17\u03a8\22\0"+
    "\33\u03a9\3\0\1\u03a9\2\0\17\u03a9\22\0\33\u03aa\3\0"+
    "\1\u03aa\2\0\17\u03aa\22\0\33\u03ab\3\0\1\u03ab\2\0"+
    "\17\u03ab\22\0\33\u03ac\3\0\1\u03ac\2\0\17\u03ac\22\0"+
    "\33\u03ad\3\0\1\u03ad\2\0\17\u03ad\22\0\33\u03ae\3\0"+
    "\1\u03ae\2\0\17\u03ae\22\0\33\u03af\3\0\1\u03af\2\0"+
    "\17\u03af\22\0\33\u03b0\3\0\1\u03b0\2\0\17\u03b0\22\0"+
    "\33\u03b1\3\0\1\u03b1\2\0\17\u03b1\22\0\33\u03b2\3\0"+
    "\1\u03b2\2\0\17\u03b2\22\0\33\u03b3\3\0\1\u03b3\2\0"+
    "\17\u03b3\22\0\33\u03b4\3\0\1\u03b4\2\0\17\u03b4\22\0"+
    "\33\u03b5\3\0\1\u03b5\2\0\17\u03b5\22\0\33\u03b6\3\0"+
    "\1\u03b6\2\0\17\u03b6\22\0\33\u03b7\3\0\1\u03b7\2\0"+
    "\17\u03b7\22\0\33\u03b8\3\0\1\u03b8\2\0\17\u03b8\22\0"+
    "\33\u03b9\3\0\1\u03b9\2\0\17\u03b9\22\0\33\u03ba\3\0"+
    "\1\u03ba\2\0\17\u03ba\22\0\33\u03bb\3\0\1\u03bb\2\0"+
    "\17\u03bb\22\0\33\u03bc\3\0\1\u03bc\2\0\17\u03bc\22\0"+
    "\33\u03bd\3\0\1\u03bd\2\0\17\u03bd\22\0\33\u03be\3\0"+
    "\1\u03be\2\0\17\u03be\22\0\33\u03bf\3\0\1\u03bf\2\0"+
    "\17\u03bf\22\0\33\u03c0\3\0\1\u03c0\2\0\17\u03c0\22\0"+
    "\33\u03c1\3\0\1\u03c1\2\0\17\u03c1\22\0\33\u03c2\3\0"+
    "\1\u03c2\2\0\17\u03c2\22\0\33\u03c3\3\0\1\u03c3\2\0"+
    "\17\u03c3\22\0\33\u03c4\3\0\1\u03c4\2\0\17\u03c4\22\0"+
    "\33\u03c5\3\0\1\u03c5\2\0\17\u03c5\22\0\33\u03c6\3\0"+
    "\1\u03c6\2\0\17\u03c6\22\0\33\u03c7\3\0\1\u03c7\2\0"+
    "\17\u03c7\22\0\33\u03c8\3\0\1\u03c8\2\0\17\u03c8\22\0"+
    "\33\u03c9\3\0\1\u03c9\2\0\17\u03c9\22\0\33\u03ca\3\0"+
    "\1\u03ca\2\0\17\u03ca\22\0\33\u03cb\3\0\1\u03cb\2\0"+
    "\17\u03cb\22\0\33\u03cc\3\0\1\u03cc\2\0\17\u03cc\22\0"+
    "\33\u03cd\3\0\1\u03cd\2\0\17\u03cd\22\0\33\u03ce\3\0"+
    "\1\u03ce\2\0\17\u03ce\22\0\33\u03cf\3\0\1\u03cf\2\0"+
    "\17\u03cf\22\0\33\u03d0\3\0\1\u03d0\2\0\17\u03d0\22\0"+
    "\33\u03d1\3\0\1\u03d1\2\0\17\u03d1\22\0\33\u03d2\3\0"+
    "\1\u03d2\2\0\17\u03d2\22\0\33\u03d3\3\0\1\u03d3\2\0"+
    "\17\u03d3\22\0\33\u03d4\3\0\1\u03d4\2\0\17\u03d4\22\0"+
    "\33\u03d5\3\0\1\u03d5\2\0\17\u03d5\22\0\33\u03d6\3\0"+
    "\1\u03d6\2\0\17\u03d6\22\0\33\u03d7\3\0\1\u03d7\2\0"+
    "\17\u03d7\22\0\33\u03d8\3\0\1\u03d8\2\0\17\u03d8\22\0"+
    "\33\u03d9\3\0\1\u03d9\2\0\17\u03d9\22\0\33\u03da\3\0"+
    "\1\u03da\2\0\17\u03da\22\0\33\u03db\3\0\1\u03db\2\0"+
    "\17\u03db\22\0\33\u03dc\3\0\1\u03dc\2\0\17\u03dc\22\0"+
    "\33\u03dd\3\0\1\u03dd\2\0\17\u03dd\22\0\33\u03de\3\0"+
    "\1\u03de\2\0\17\u03de\22\0\33\u03df\3\0\1\u03df\2\0"+
    "\17\u03df\22\0\33\u03e0\3\0\1\u03e0\2\0\17\u03e0\22\0"+
    "\33\u03e1\3\0\1\u03e1\2\0\17\u03e1\22\0\33\u03e2\3\0"+
    "\1\u03e2\2\0\17\u03e2\22\0\33\u03e3\3\0\1\u03e3\2\0"+
    "\17\u03e3\22\0\33\u03e4\3\0\1\u03e4\2\0\17\u03e4\22\0"+
    "\33\u03e5\3\0\1\u03e5\2\0\17\u03e5\22\0\33\u03e6\3\0"+
    "\1\u03e6\2\0\17\u03e6\22\0\33\u03e7\3\0\1\u03e7\2\0"+
    "\17\u03e7\22\0\33\u03e8\3\0\1\u03e8\2\0\17\u03e8\22\0"+
    "\33\u03e9\3\0\1\u03e9\2\0\17\u03e9\22\0\33\u03ea\3\0"+
    "\1\u03ea\2\0\17\u03ea\22\0\33\u03eb\3\0\1\u03eb\2\0"+
    "\17\u03eb\22\0\33\u03ec\3\0\1\u03ec\2\0\17\u03ec\22\0"+
    "\33\u03ed\3\0\1\u03ed\2\0\17\u03ed\22\0\33\u03ee\3\0"+
    "\1\u03ee\2\0\17\u03ee\22\0\33\u03ef\3\0\1\u03ef\2\0"+
    "\17\u03ef\22\0\33\u03f0\3\0\1\u03f0\2\0\17\u03f0\22\0"+
    "\33\u03f1\3\0\1\u03f1\2\0\17\u03f1\22\0\33\u03f2\3\0"+
    "\1\u03f2\2\0\17\u03f2\22\0\33\u03f3\3\0\1\u03f3\2\0"+
    "\17\u03f3\22\0\33\u03f4\3\0\1\u03f4\2\0\17\u03f4\22\0"+
    "\33\u03f5\3\0\1\u03f5\2\0\17\u03f5\22\0\33\u03f6\3\0"+
    "\1\u03f6\2\0\17\u03f6\22\0\33\u03f7\3\0\1\u03f7\2\0"+
    "\17\u03f7\22\0\33\u03f8\3\0\1\u03f8\2\0\17\u03f8\22\0"+
    "\33\u03f9\3\0\1\u03f9\2\0\17\u03f9\22\0\33\u03fa\3\0"+
    "\1\u03fa\2\0\17\u03fa\22\0\33\u03fb\3\0\1\u03fb\2\0"+
    "\17\u03fb\22\0\33\145\3\0\1\145\2\0\17\145\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63756];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\56\1\2\11\2\1\1\11"+
    "\3\1\1\11\3\1\1\11\45\1\2\0\2\11\2\0"+
    "\30\1\6\11\2\0\1\1\1\0\36\1\1\0\1\11"+
    "\1\0\23\1\1\0\25\1\1\0\1\11\u0229\1\1\0"+
    "\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1019];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private int count; // Este lleva la cuenta de los TOKENS y es tambiÃ©n el identificador
    private ArrayList<Yytoken> tokens = new ArrayList<>();    
    
    /**
     * Valida la inserciÃ³n de un nuevo token, si exite agrega la line o aumenta las ocurrencias del TOKEN en la misma linea
     * @param newToken
     * @param line
     * @return 
     */
    private boolean addToken(Yytoken newToken, int line) {
        for (Yytoken token : tokens) {
            if (token.getName().toUpperCase().equals(newToken.getName().toUpperCase()) && token.getType().equals(newToken.getType())) {
                for (int i = 0; i < token.getLines().size(); i++) {
                    if (token.getLines().get(i).getNumLine() == line) {
                        token.getLines().get(i).setOccurrences(token.getLines().get(i).getOccurrences() + 1);
                        return true;
                    }
                }
                token.getLines().add(new Line(line));
                return true;
            }
        }
        count++;
        newToken.setId(count);
        newToken.getLines().add(new Line(line));
        tokens.add(newToken);
        return true;
    }

    /**
     * @return the lines
     */
    public ArrayList<Yytoken> getTokens() {
        return tokens;
    }
    
    @Override
    public String toString() {
        String value = "";
        for (Yytoken token : tokens) {
            value += token.toString() + "\n";
        }
        return value;
    }

    public String toStringTokens() {
        String value = "";
        for (Yytoken token : tokens) {
            if(!token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }
    
    public String toStringErrores() {
        String value = "";
        for (Yytoken token : tokens) {
            if(token.getType().equals(Types_Tokens.ERROR)){
                value += token.toString() + "\n";
            }            
        }
        return value;
    }

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      count = 0;
    tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.ERROR), yyline);
            } 
            // fall through
          case 58: break;
          case 2: 
            { /*Ignore*/
            } 
            // fall through
          case 59: break;
          case 3: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LEFTPARENTHESIS);
            } 
            // fall through
          case 60: break;
          case 4: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTIPLY);
            } 
            // fall through
          case 61: break;
          case 5: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_RIGHTPARENTHESIS);
            } 
            // fall through
          case 62: break;
          case 6: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVIDE);
            } 
            // fall through
          case 63: break;
          case 7: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.IDENTIFICADOR), yyline);
        return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.ENTERO, new Integer(yytext()));
            } 
            // fall through
          case 65: break;
          case 9: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESS);
            } 
            // fall through
          case 66: break;
          case 10: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_COMMA);
            } 
            // fall through
          case 67: break;
          case 11: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_SEMI);
            } 
            // fall through
          case 68: break;
          case 12: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTS);
            } 
            // fall through
          case 69: break;
          case 13: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUS);
            } 
            // fall through
          case 70: break;
          case 14: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_EQUAL);
            } 
            // fall through
          case 71: break;
          case 15: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATER);
            } 
            // fall through
          case 72: break;
          case 16: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESS);
            } 
            // fall through
          case 73: break;
          case 17: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MULTEQUAL);
            } 
            // fall through
          case 74: break;
          case 18: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIVEQUAL);
            } 
            // fall through
          case 75: break;
          case 19: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_OR, yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_OF, yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_IF, yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TO, yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSLESS);
            } 
            // fall through
          case 80: break;
          case 24: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_LESSEQUAL);
            } 
            // fall through
          case 81: break;
          case 25: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_LINE, new String(yytext()));
            } 
            // fall through
          case 82: break;
          case 26: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.NUMERAL_CHARACTER, new String(yytext()));
            } 
            // fall through
          case 83: break;
          case 27: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_DO, yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_TWOPOINTSEGUAL);
            } 
            // fall through
          case 85: break;
          case 29: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSPLUS);
            } 
            // fall through
          case 86: break;
          case 30: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_PLUSEQUAL);
            } 
            // fall through
          case 87: break;
          case 31: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_GREATEREQUAL);
            } 
            // fall through
          case 88: break;
          case 32: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_LESSEQUAL);
            } 
            // fall through
          case 89: break;
          case 33: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_DIFERENT);
            } 
            // fall through
          case 90: break;
          case 34: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_END, yytext());
            } 
            // fall through
          case 91: break;
          case 35: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_AND, yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OPB_NOT, yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.DATA_TYPE,  yytext());
            } 
            // fall through
          case 94: break;
          case 38: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.REAL, new Double(yytext()));
            } 
            // fall through
          case 95: break;
          case 39: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_STRING), yyline);
        return symbol(sym.STRING_BLOCK, new String(yytext()));
            } 
            // fall through
          case 96: break;
          case 40: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_DIV, yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FOR, yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.OPERADOR), yyline);
        return symbol(sym.OP_MOD, yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_VAR, yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_ELSE, yytext());
            } 
            // fall through
          case 101: break;
          case 45: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_READ, yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_THEN, yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_TRUE, yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.LITERAL_NUMERAL), yyline);
        return symbol(sym.SCIENTIFIC_NOTATION, new Double(yytext()));
            } 
            // fall through
          case 105: break;
          case 49: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_BEGIN, yytext());
            } 
            // fall through
          case 106: break;
          case 50: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_CONST, yytext());
            } 
            // fall through
          case 107: break;
          case 51: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FALSE, yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_UNTIL, yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WHILE, yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_WRITE, yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROGRAM, yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_FUNCTION, yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { addToken(new Yytoken(count, yytext(), Types_Tokens.PALABRA_RESERVADA), yyline);
        return symbol(sym.RW_PROCEDURE, yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
